# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Format reference: https://docs.github.com/en/actions/reference

name: Compiler CI

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#on
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Daily at 12pm UTC
    - cron: '0 12 * * *'

permissions:
  contents: read

env:
  VERSION_NODEJS: '22'
  UNSYMLINK_DIR: bazel-bin-unsymlink

# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobs
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Setup Java
        # https://github.com/marketplace/actions/setup-java-jdk
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: zulu
          java-version: '21'
          java-package: jdk
          architecture: x64

        # Clone closure-compiler repo from the commit under test into current directory.
      - name: Checkout Current closure-compiler Commit
        # https://github.com/marketplace/actions/checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      # https://github.com/bazel-contrib/setup-bazel
      - uses: bazel-contrib/setup-bazel@4fd964a13a440a8aeb0be47350db2fc640f19ca8 # v0.15.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows
          repository-cache: true

      - name: Build and Test
        run: unset ANDROID_HOME && bazelisk test //:all

      - name: Unsymlink Bazel Artifacts
        # upload-artifact doesn't support paths with symlinks
        run: |
          mkdir -p ${{ env.UNSYMLINK_DIR }}
          cp -t ${{ env.UNSYMLINK_DIR }} bazel-bin/compiler_uberjar_deploy.jar
          cp -t ${{ env.UNSYMLINK_DIR }} bazel-bin/*_bundle.jar

        # Share the following files with other jobs in this workflow. They can be grabbed using ID
        # `unshaded_compiler`. This is made possible by uploading the files to GitHub controlled
        # storage.
      - name: Share Unshaded Compiler
        # https://github.com/marketplace/actions/upload-a-build-artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: unshaded_compiler
          path: ${{ env.UNSYMLINK_DIR }}/compiler_uberjar_deploy.jar
          if-no-files-found: error

        # If this build will be uploadaded as a SNAPSHOT, share the Sonatype bundles with the other
        # jobs in this workflow. They can be grabbed using ID `snapshot_bundles`. This is made
        # possible by uploading the files to GitHub controlled storage.
      - name: Share Snapshot Bundles
        # https://github.com/marketplace/actions/upload-a-build-artifact
        if: ${{ github.event_name == 'schedule' }}
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: snapshot_bundles
          path: ${{ env.UNSYMLINK_DIR }}/*_bundle.jar
          if-no-files-found: error

  test-closure-compiler-npm:
    name: Make Sure closure-compiler-npm is Compatible with this Compiler Build
    runs-on: ubuntu-latest
    needs:
      - build-and-test
    steps:
      - name: Setup Java
        # https://github.com/marketplace/actions/setup-java-jdk
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: zulu
          java-version: '21'
          java-package: jdk
          architecture: x64

      - name: Setup Node.js
        # https://github.com/marketplace/actions/setup-node-js-environment
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.VERSION_NODEJS }}

        # Clone closure-compiler-npm repo from master into the current directory.
      - name: Checkout Current closure-compiler-npm Commit
        # https://github.com/marketplace/actions/checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          repository: google/closure-compiler-npm
          ref: master

        # Clone closure-compiler repo from the commit under test into the npm repo compiler
        # submodule
      - name: Checkout Current closure-compiler Commit
        # https://github.com/marketplace/actions/checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          path: compiler

        # Grab the compiler binary that was shared from `build-and-test` and put the file into
        # ./compiler/bazel-bin.
      - name: Grab Unshaded Compiler
        # https://github.com/marketplace/actions/download-a-build-artifact
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: unshaded_compiler
          # Put the binary where bazel would have put it.
          path: compiler/bazel-bin

      - name: Test closure-compiler-npm
        run: compiler/.github/ci_support/test_closure-compiler-npm.sh compiler/bazel-bin/compiler_uberjar_deploy.jar

  deploy-snapshots:
    name: Deploy Snapshot Bundles to Sonatype
    runs-on: ubuntu-latest
    # Disable daily snapshot deployments. This will be later replaced with lower cadence releases.
    if: false
    needs:
      - build-and-test
      - test-closure-compiler-npm
    steps:
        # This also installs Maven, which is being used to do the SNAPSHOT deployment.
        # TODO(nickreid): Delete this if we can find/write an upload tool other than Maven.
      - name: Setup Java
        # https://github.com/marketplace/actions/setup-java-jdk
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5.0.0
        with:
          distribution: zulu
          java-version: '21'
          java-package: jdk
          architecture: x64

        # Clone closure-compiler repo from the commit under test into current directory.
      - name: Checkout Current closure-compiler Commit
        # https://github.com/marketplace/actions/checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Setup Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: ${{ env.VERSION_NODEJS }}

        # Grab the SNAPSHOT bundles shared from `build-and-test` and put the file into ./bazel-bin.
      - name: Grab Snapshot Bundles
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: snapshot_bundles
          # Make it seem like files were generated by bazel
          path: bazel-bin

        # Upload the build from this commit to Sonatype for users who want to depend on the
        # compiler at head. SNAPSHOTs are transient unversioned builds stored in a seperate
        # artifact repo than versioned releases. This system is a purely Maven concept.
      - name: Deploy Snapshot Bundles to Sonatype
        run: .github/ci_support/deploy_sonatype_snapshot_bundles.js
        env:
          SONATYPE_USERNAME: closure-compiler
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

  tag_release_version_id:
    name: Tag Release Version ID
    # Run on a push to master but not on a pull request
    # Pull requests are not necessarily trusted to configure the
    # correct release tag.
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    # Checkout the piper-cut-cl.json from the most recent two commits
    - name: Checkout Current closure-compiler Commit
      # https://github.com/marketplace/actions/checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 2
        sparse-checkout: |
          .github/piper-cut-cl.json
          .github/ci_support/tag_release_version.sh
        sparse-checkout-cone-mode: false

    - id: detect_changes
      run: |
        PIPER_DIFF=$(git diff HEAD~1 -- .github/piper-cut-cl.json)
        FOUND_NEW_RELEASE=$([ -n "$PIPER_DIFF" ] && echo "true" || echo "false")
        echo "foundNewRelease=$FOUND_NEW_RELEASE" >> "$GITHUB_OUTPUT"
        echo "foundNewRelease: $FOUND_NEW_RELEASE"

    - id: set_piper_json_vars
      if: ${{ steps.detect_changes.outputs.foundNewRelease == 'true' }}
      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#steps-context
      run: |
        {
            echo 'piperJson<<EOF'
            cat ./.github/piper-cut-cl.json
            echo EOF
        } >> "$GITHUB_OUTPUT"

    # Check out all historical commits
    # This is much more expensive than just checking out the most recent
    # 2 commits, as done above, so only do this if actually cutting a release
    - name: Checkout all closure-compiler commits and tags
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      if: ${{ steps.detect_changes.outputs.foundNewRelease == 'true' }}
      with:
        # a depth of 0 triggers a fetch of all historical commits/branches/tags
        # https://github.com/marketplace/actions/checkout#Fetch-all-history-for-all-tags-and-branches
        fetch-depth: 0

    - name: Tag cut CL
      id: tag_cut_cl
      if: ${{ steps.detect_changes.outputs.foundNewRelease == 'true' }}
      run: |
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          .github/ci_support/tag_release_version.sh \
              "${{ fromJson(env.piperJson).piper_cut_cl }}" \
              "${{ fromJson(env.piperJson).version_id }}";
      env:
        piperJson: ${{ steps.set_piper_json_vars.outputs.piperJson }}
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
