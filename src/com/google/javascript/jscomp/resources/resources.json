{"js/base.js":"/*\n * Copyright 2012 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview The base namespace for code injected by the compiler\n * at compile-time.\n */\n\n/** @const */\nvar $jscomp = $jscomp || {};\n\n/** @const Locals for goog.scope */\n$jscomp.scope = {};\n","js/es6/array.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 Array polyfills.\n * @suppress {uselessCode}\n */\n'require es6/array/copywithin';\n'require es6/array/entries';\n'require es6/array/fill';\n'require es6/array/find';\n'require es6/array/findindex';\n'require es6/array/flat';\n'require es6/array/flatmap';\n'require es6/array/from';\n'require es6/array/includes';\n'require es6/array/keys';\n'require es6/array/of';\n'require es6/array/values';\n","js/es6/array/copywithin.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.copyWithin', function(orig) {\n  // requires strict mode to throw for invalid `this` or params\n  'use strict';\n\n  if (orig) return orig;\n\n  /**\n   * Copies elements from one part of the array to another.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {number} target Start index to copy elements to.\n   * @param {number} start Start index to copy elements from.\n   * @param {number=} opt_end Index from which to end copying.\n   * @return {!IArrayLike<VALUE>} The array, with the copy performed in-place.\n   * @template VALUE\n   */\n  var polyfill = function(target, start, opt_end) {\n    var len = this.length;\n    target = toInteger(target);\n    start = toInteger(start);\n    var end = opt_end === undefined ? len : toInteger(opt_end);\n    var to = target < 0 ? Math.max(len + target, 0) : Math.min(target, len);\n    var from = start < 0 ? Math.max(len + start, 0) : Math.min(start, len);\n    var final = end < 0 ? Math.max(len + end, 0) : Math.min(end, len);\n    if (to < from) {\n      while (from < final) {\n        if (from in this) {\n          this[to++] = this[from++];\n        } else {\n          delete this[to++];\n          from++;\n        }\n      }\n    } else {\n      final = Math.min(final, len + from - to);\n      to += final - from;\n      while (final > from) {\n        if (--final in this) {\n          this[--to] = this[final];\n        } else {\n          delete this[--to];\n        }\n      }\n    }\n    return this;\n  };\n\n  /**\n   * @param {number} arg\n   * @return {number}\n   */\n  function toInteger(arg) {\n    var n = Number(arg);\n    if (n === Infinity || n === -Infinity) {\n      return n;\n    }\n    return n | 0;\n  }\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/entries.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/fill.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.fill', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Fills elements of an array with a constant value.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {VALUE} value Value to fill.\n   * @param {number=} opt_start Start index, or zero if omitted.\n   * @param {number=} opt_end End index, or length if omitted.\n   * @return {!IArrayLike<VALUE>} The array, with the fill performed in-place.\n   * @template VALUE\n   * @suppress {reportUnknownTypes, strictPrimitiveOperators}\n   */\n  var polyfill = function(value, opt_start, opt_end) {\n    var length = this.length || 0;\n    if (opt_start < 0) {\n      opt_start = Math.max(0, length + /** @type {number} */ (opt_start));\n    }\n    if (opt_end == null || opt_end > length) opt_end = length;\n    opt_end = Number(opt_end);\n    if (opt_end < 0) opt_end = Math.max(0, length + opt_end);\n    for (var i = Number(opt_start || 0); i < opt_end; i++) {\n      this[i] = value;\n    }\n    return this;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/find.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/findinternal';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.find', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Finds and returns an element that satisfies the given predicate.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {function(this: THIS, VALUE, number, !IArrayLike<VALUE>): *}\n   *     callback\n   * @param {THIS=} opt_thisArg\n   * @return {VALUE|undefined} The found value, or undefined.\n   * @template VALUE, THIS\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(callback, opt_thisArg) {\n    return $jscomp.findInternal(this, callback, opt_thisArg).v;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/findindex.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/findinternal';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.findIndex', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Finds an element that satisfies the given predicate, returning its index.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @param {function(this: THIS, VALUE, number, !IArrayLike<VALUE>): *}\n   *     callback\n   * @param {THIS=} opt_thisArg\n   * @return {number} The found value, or undefined.\n   * @template VALUE, THIS\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(callback, opt_thisArg) {\n    return $jscomp.findInternal(this, callback, opt_thisArg).i;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/flat.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @fileoverview @suppress {uselessCode} */\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.flat', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills Array.prototype.flat.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\n   *\n   * @param {number=} depth\n   * @return {!Array<S>}\n   * @this {!IArrayLike<T>}\n   * @template T, S\n   * @suppress {reportUnknownTypes}\n   */\n  var flat = function(depth) {\n    // TODO(sdh): Consider respecting Symbol.species (b/121061255).\n    depth = depth === undefined ? 1 : depth;\n    var flattened = [];\n    for (var i = 0; i < this.length; i++) {\n      var element = this[i];\n      if (Array.isArray(element) && depth > 0) {\n        var inner = Array.prototype.flat.call(element, depth - 1);\n        flattened.push.apply(flattened, inner);\n      } else {\n        flattened.push(element);\n      }\n    }\n    return flattened;\n  };\n\n  return flat;\n}, 'es9', 'es5');\n","js/es6/array/flatmap.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @fileoverview @suppress {uselessCode} */\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.flatMap', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills Array.prototype.flatMap.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap\n   *\n   * @param {function(this: THIS, T, number, !IArrayLike<T>): !Array<S>} callback\n   * @param {THIS=} thisArg\n   * @return {!Array<S>}\n   * @this {!IArrayLike<T>}\n   * @template T, THIS, S\n   * @suppress {reportUnknownTypes}\n   */\n  var flatMap = function(callback, thisArg) {\n    var mapped = [];\n    for (var i = 0; i < this.length; i++) {\n      var result = callback.call(thisArg, this[i], i, this);\n      if (Array.isArray(result)) {\n        mapped.push.apply(mapped, result);\n      } else {\n        // NOTE: The specification says the callback can return a non-Array.\n        // We intentionally don't include that in the type information on\n        // this function or the corresponding extern in order to encourage\n        // more readable code and avoid complex TTL in the type annotations,\n        // but we still want to behave correctly if the callback gives us a\n        // non-Array.\n        mapped.push(result);\n      }\n    }\n    return mapped;\n  };\n\n  return flatMap;\n}, 'es9', 'es5');\n","js/es6/array/from.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Array.from', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Creates a new Array from an array-like or iterable object.\n   *\n   * <p>Polyfills the static function Array.from().  Does not support\n   * constructor inheritance (i.e. (subclass of Array).from), and\n   * relies on the compiler to check the validity of inputs rather\n   * than producing spec-compliant TypeErrors.\n   *\n   * @param {!IArrayLike<INPUT>|!Iterable<INPUT>} arrayLike\n   *     An array-like or iterable.\n   * @param {(function(this: THIS, INPUT, number): OUTPUT)=} opt_mapFn\n   *     Function to call on each argument.\n   * @param {THIS=} opt_thisArg\n   *     Object to use as 'this' when calling mapFn.\n   * @return {!Array<OUTPUT>}\n   * @template INPUT, OUTPUT, THIS\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(arrayLike, opt_mapFn, opt_thisArg) {\n    opt_mapFn = opt_mapFn != null ? opt_mapFn : function(x) { return x; };\n    var result = [];\n    // NOTE: this is cast to ? because [] on @struct is an error\n    var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n        (/** @type {?} */ (arrayLike)[Symbol.iterator]);\n    if (typeof iteratorFunction == 'function') {\n      arrayLike = iteratorFunction.call(arrayLike);\n      var next;\n      var k = 0;\n      while (!(next = arrayLike.next()).done) {\n        result.push(\n            opt_mapFn.call(/** @type {?} */ (opt_thisArg), next.value, k++));\n      }\n    } else {\n      var len = arrayLike.length;  // need to support non-iterables\n      for (var i = 0; i < len; i++) {\n        result.push(\n            opt_mapFn.call(/** @type {?} */ (opt_thisArg), arrayLike[i], i));\n      }\n    }\n    return result;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/includes.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/object/is';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.includes', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills Array.prototype.includes.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes\n   *\n   * @this {!IArrayLike<T>}\n   * @param {T} searchElement\n   * @param {number=} opt_fromIndex\n   * @return {boolean}\n   * @template T\n   * @suppress {reportUnknownTypes}\n   */\n  var includes = function(searchElement, opt_fromIndex) {\n    var array = this;\n    if (array instanceof String) {\n      array = /** @type {!IArrayLike} */ (String(array));\n    }\n    var len = array.length;\n    var i = opt_fromIndex || 0;\n    if (i < 0) {\n      i = Math.max(i + len, 0);\n    }\n    for (; i < len; i++) {\n      var element = array[i];\n      if (element === searchElement || Object.is(element, searchElement)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return includes;\n}, 'es7', 'es3');\n","js/es6/array/keys.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/util/iteratorfromarray';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.prototype.keys', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of keys of the given array.\n   *\n   * @this {!IArrayLike}\n   * @return {!IteratorIterable<number>}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(this, function(i) { return i; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/of.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/array/from';\n'require util/polyfill';\n\n$jscomp.polyfill('Array.of', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Creates an array from a fixed set of arguments.\n   *\n   * <p>Polyfills the static function Array.of().  Does not support\n   * constructor inheritance (i.e. (subclass of Array).of).\n   *\n   * @param {...T} var_args Elements to include in the array.\n   * @return {!Array<T>}\n   * @template T\n   */\n  var polyfill = function(var_args) {\n    return Array.from(arguments);\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/array/values.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/util/iteratorfromarray';\n'require util/polyfill';\n\n// NOTE: Although Array.prototype.values was added to the 2015 edition of the\n// spec, we consider it an \"ES8\" feature because many browsers which are\n// otherwise ES6-compatible, have not implemented it due to web compatibility\n// issues. See https://bugs.chromium.org/p/chromium/issues/detail?id=615873\n$jscomp.polyfill('Array.prototype.values', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of values of the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<VALUE>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(this, function(k, v) { return v; });\n  };\n\n  return polyfill;\n}, 'es8', 'es3');\n","js/es6/async_generator_wrapper.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime logic for transpiled Async Generators.\n * @suppress {uselessCode}\n */\n'require base';\n'require es6/util/makeasynciterator';\n\n\n/** @enum {number} */\n$jscomp.AsyncGeneratorWrapper$ActionEnum = {\n  /** Yield the value from the wrapper generator */\n  YIELD_VALUE: 0,\n  /** Yield each value from a delegate generator */\n  YIELD_STAR: 1,\n  /** Resolve the value as a Promise and continue execution */\n  AWAIT_VALUE: 2,\n};\n\n/**\n * @param {!$jscomp.AsyncGeneratorWrapper$ActionEnum} action\n * @param {VALUE} value\n * @constructor\n * @template VALUE\n * @struct\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper$ActionRecord = function(action, value) {\n  /**\n   * @public\n   * @const\n   * @type {!$jscomp.AsyncGeneratorWrapper$ActionEnum}\n   */\n  this.action = action;\n\n  /**\n   * @public\n   * @const\n   * @type {VALUE}\n   */\n  this.value = /** @type {VALUE} */ (value);\n};\n\n/** @enum {string} */\n$jscomp.AsyncGeneratorWrapper$GeneratorMethod = {\n  NEXT: 'next', THROW: 'throw', RETURN: 'return',\n};\n\n/**\n * Records the details of a call to `next()`, `throw()`, or `return()`.\n *\n * One of these objects will be created for each call.\n *\n * @param {$jscomp.AsyncGeneratorWrapper$GeneratorMethod} method\n *    Method to call on generator\n * @param {?} param\n *    Parameter for method called on generator\n *\n * @param {function(!IIterableResult<VALUE>)} resolve\n *    Function to resolve the Promise associated with this frame.\n * @param {function(?)} reject\n *    Function to reject the Promise associated with this frame.\n *\n * @constructor\n * @private\n * @template VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionFrame_ = function(\n    method, param, resolve, reject) {\n  /** @type {$jscomp.AsyncGeneratorWrapper$GeneratorMethod} */\n  this.method = method;\n  /** @type {?} */\n  this.param = param;\n  /** @type {function(!IIterableResult<VALUE>)} */\n  this.resolve = resolve;\n  /** @type {function(?)} */\n  this.reject = reject;\n};\n\n/**\n * @param {!$jscomp.AsyncGeneratorWrapper$ExecutionFrame_<VALUE>} frame\n *    The frame at this position in the queue\n * @param {$jscomp.AsyncGeneratorWrapper$ExecutionNode_<VALUE>} next\n *    The node containing the frame to be executed after this one completes\n *\n * @constructor\n * @private\n * @template VALUE\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionNode_ = function(frame, next) {\n  /** @type {!$jscomp.AsyncGeneratorWrapper$ExecutionFrame_<VALUE>} */\n  this.frame = frame;\n  /** @type {$jscomp.AsyncGeneratorWrapper$ExecutionNode_<VALUE>} */\n  this.next = next;\n};\n\n/**\n * A minimalistic queue backed by a linked-list.\n *\n * @constructor\n * @private\n * @template VALUE\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionQueue_ = function() {\n  /**\n   * @type {$jscomp.AsyncGeneratorWrapper$ExecutionNode_<VALUE>}\n   * @private\n   */\n  this.head_ = null;\n\n  /**\n   *\n   * @type {$jscomp.AsyncGeneratorWrapper$ExecutionNode_<VALUE>}\n   * @private\n   */\n  this.tail_ = null;\n};\n\n/**\n * @return {boolean}\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.isEmpty = function() {\n  return this.head_ === null;\n};\n\n/**\n * Returns the current head frame if it exists, otherwise throws Error.\n *\n * @return {!$jscomp.AsyncGeneratorWrapper$ExecutionFrame_<VALUE>}\n * @throws {Error} if the queue is empty\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.first = function() {\n  if (this.head_) {\n    return this.head_.frame;\n  } else {\n    throw new Error('no frames in executionQueue');\n  }\n};\n\n/**\n * Drops the current head frame off the head of the queue. Performs same\n * operations as a theoretical \"pop\", but saves time by not storing or returning\n * the popped frame.\n *\n * If the queue is empty, no operation is performed.\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.drop = function() {\n  if (this.head_) {\n    this.head_ = this.head_.next;\n    if (!this.head_) {\n      this.tail_ = null;\n    }\n  }\n};\n\n/**\n * @param {!$jscomp.AsyncGeneratorWrapper$ExecutionFrame_<VALUE>} newFrame\n *    the new frame to be executed after all frames currently in the queue\n */\n$jscomp.AsyncGeneratorWrapper$ExecutionQueue_.prototype.enqueue = function(\n    newFrame) {\n  var node = new $jscomp.AsyncGeneratorWrapper$ExecutionNode_(newFrame, null);\n  if (this.tail_) {\n    this.tail_.next = node;\n    this.tail_ = node;\n  } else {\n    this.head_ = node;\n    this.tail_ = node;\n  }\n};\n\n/**\n * @constructor\n * @implements {AsyncGenerator<VALUE>}\n * @implements {AsyncIterable<VALUE>}\n * @template VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper = function(\n    /** @type {!Generator<$jscomp.AsyncGeneratorWrapper$ActionRecord<VALUE>>} */\n    generator) {\n  /** @private */\n  this.generator_ = generator;\n\n  /**\n   * @private\n   * @type {AsyncIterator<VALUE>}\n   */\n  this.delegate_ = null;\n\n  /**\n   * @type {!$jscomp.AsyncGeneratorWrapper$ExecutionQueue_<VALUE>}\n   * @private\n   */\n  this.executionQueue_ = new $jscomp.AsyncGeneratorWrapper$ExecutionQueue_();\n\n  /** @type {$jscomp.AsyncGeneratorWrapper<VALUE>} */\n  this[Symbol.asyncIterator] =\n      /** @return {$jscomp.AsyncGeneratorWrapper<VALUE>} */ function() {\n        return this;\n      };\n\n  var self = this;\n\n  /**\n   * @this {undefined}\n   * @param {!IIterableResult<VALUE>} record\n   * @private\n   */\n  this.boundHandleDelegateResult_ = function(record) {\n    self.handleDelegateResult_(record);\n  };\n\n  /**\n   * @this {undefined}\n   * @param {*} thrownError\n   * @private\n   */\n  this.boundHandleDelegateError_ = function(thrownError) {\n    self.handleDelegateError_(thrownError);\n  };\n\n  /**\n   * @this {undefined}\n   * @param {*} err\n   * @private\n   */\n  this.boundRejectAndClose_ = function(err) {\n    self.rejectAndClose_(err);\n  };\n};\n\n/**\n * @param {!$jscomp.AsyncGeneratorWrapper$GeneratorMethod} method\n * @param {?} param\n * @return {!Promise<!IIterableResult<VALUE>>}\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.enqueueMethod_ = function(\n    method, param) {\n  var self = this;\n  return new Promise(function(resolve, reject) {\n    var wasEmpty = self.executionQueue_.isEmpty();\n    self.executionQueue_.enqueue(\n        new $jscomp.AsyncGeneratorWrapper$ExecutionFrame_(\n            method, param, resolve, reject));\n    if (wasEmpty) {\n      self.runFrame_();\n    }\n  });\n};\n\n/**\n * @override\n * @param {?=} opt_value\n * @return {!Promise<!IIterableResult<VALUE>>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.next = function(opt_value) {\n  return this.enqueueMethod_(\n      $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT, opt_value);\n};\n\n/**\n * @override\n * @param {VALUE} value\n * @return {!Promise<!IIterableResult<VALUE>>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.return = function(value) {\n  return this.enqueueMethod_(\n      $jscomp.AsyncGeneratorWrapper$GeneratorMethod.RETURN,\n      new $jscomp.AsyncGeneratorWrapper$ActionRecord(\n          $jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE, value));\n};\n\n/**\n * @override\n * @param {*=} exception\n * @return {!Promise<!IIterableResult<VALUE>>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.throw = function(exception) {\n  return this.enqueueMethod_(\n      $jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW, exception);\n};\n\n/**\n * Recursively executes all frames in the executionQueue until it is empty.\n * Frames that are added to the queue while execution is being performed will\n * be executed when they are reached.\n *\n * In order to guarantee each frame in the entire queue will be processed\n * exactly once, each branch in runDelegateFrame and runGeneratorFrame should\n * conclude with the following specification:\n *\n * If the frame is ready to be resolved/rejected:\n *\n *  1. Resolve or reject the frame.\n *  2. Drop the frame from the head of the queue.\n *  3. End with a call to runFrame.\n *\n * Otherwise, if another action must be performed:\n *\n *  1. Mutate the frame's method and param to reflect the next action.\n *  2. End with a call to runFrame.\n *\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.runFrame_ = function() {\n  if (!this.executionQueue_.isEmpty()) {\n    try {\n      if (this.delegate_) {\n        this.runDelegateFrame_();\n      } else {\n        this.runGeneratorFrame_();\n      }\n    } catch (err) {\n      this.rejectAndClose_(err);\n    }\n  }\n};\n\n/**\n * For safety, all branches should meet invariants listed in runFrame.\n *\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.runGeneratorFrame_ = function() {\n  var self = this;\n  var frame = this.executionQueue_.first();\n  try {\n    var genRec = this.generator_[frame.method](frame.param);\n    if (genRec.value instanceof $jscomp.AsyncGeneratorWrapper$ActionRecord) {\n      switch (genRec.value.action) {\n        case $jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE:\n          Promise.resolve(genRec.value.value)\n              .then(\n                  function(resolvedValue) {\n                    frame.resolve({value: resolvedValue, done: genRec.done});\n                    self.executionQueue_.drop();\n                    self.runFrame_();\n                  },\n                  function(e) {\n                    frame.reject(e);\n                    self.executionQueue_.drop();\n                    self.runFrame_();\n                  })\n              .catch(this.boundRejectAndClose_);\n          return;\n\n        case $jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_STAR:\n          self.delegate_ = $jscomp.makeAsyncIterator(genRec.value.value);\n          frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;\n          frame.param = undefined;\n          self.runFrame_();\n          return;\n\n        case $jscomp.AsyncGeneratorWrapper$ActionEnum.AWAIT_VALUE:\n          Promise.resolve(genRec.value.value)\n              .then(\n                  function(resolvedValue) {\n                    frame.method =\n                        $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;\n                    frame.param = resolvedValue;\n                    self.runFrame_();\n                  },\n                  function(thrownErr) {\n                    frame.method =\n                        $jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW;\n                    frame.param = thrownErr;\n                    self.runFrame_();\n                  })\n              .catch(this.boundRejectAndClose_);\n          return;\n\n        default:\n          throw new Error('Unrecognized AsyncGeneratorWrapper$ActionEnum');\n      }\n    }\n    else {\n      frame.resolve(genRec);\n      self.executionQueue_.drop();\n      self.runFrame_();\n    }\n  } catch (e) {\n    frame.reject(e);\n    self.executionQueue_.drop();\n    self.runFrame_();\n  }\n};\n\n\n/**\n * For safety, all branches should meet invariants listed in runFrame.\n *\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.runDelegateFrame_ = function() {\n  if (!this.delegate_) {\n    throw new Error(\"no delegate to perform execution\");\n  }\n  var frame = this.executionQueue_.first();\n  if (frame.method in this.delegate_) {\n    try {\n      this.delegate_[frame.method](frame.param)\n          .then(this.boundHandleDelegateResult_, this.boundHandleDelegateError_)\n          .catch(this.boundRejectAndClose_);\n    } catch (err) {\n      this.handleDelegateError_(err);\n    }\n  } else {\n    this.delegate_ = null;\n    this.runFrame_();\n  }\n};\n\n/**\n * @param {!IIterableResult<VALUE>} record\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.handleDelegateResult_ = function(\n    record) {\n  var frame = this.executionQueue_.first();\n  if (record.done === true) {\n    // Delegate is done. Its return value becomes the value of the `yield*`\n    // expression. We must continue the async generator as if next() were called\n    // with that value here.\n    this.delegate_ = null;\n    frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT;\n    frame.param = record.value;\n    this.runFrame_();\n  } else {\n    frame.resolve({value: record.value, done: false});\n    this.executionQueue_.drop();\n    this.runFrame_();\n  }\n};\n\n/**\n * @param {*} thrownError\n * @private\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncGeneratorWrapper.prototype.handleDelegateError_ = function(\n    thrownError) {\n  var frame = this.executionQueue_.first();\n  // The delegate threw an exception or rejected a promise, so we must continue\n  // our generator as if the `yield *` threw the exception.\n  this.delegate_ = null;\n  frame.method = $jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW;\n  frame.param = thrownError;\n  this.runFrame_();\n};\n\n/**\n * Rejects the current frame and closes the generator.\n *\n * @param {*} err Error causing the rejection\n * @private\n */\n$jscomp.AsyncGeneratorWrapper.prototype.rejectAndClose_ = function(err) {\n  if (!this.executionQueue_.isEmpty()) {\n    this.executionQueue_.first().reject(err);\n    this.executionQueue_.drop();\n  }\n\n  if (this.delegate_ && 'return' in this.delegate_) {\n    this.delegate_['return'](undefined);\n    this.delegate_ = null;\n  }\n  this.generator_['return'](undefined);\n\n  // Keep processing all frames remaining in the queue.\n  // Note: Some of these frames might be throw requests, but our backing\n  // generator will handle these appropriately.\n  this.runFrame_();\n};\n","js/es6/conformance.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/global';\n\n\n/**\n * @fileoverview Check one of the most obscure features of ES6 as a proxy\n * for full conformance.  If this is enabled, this test is used instead of\n * larger, more specific conformance tests.\n */\n\n/**\n * Check ES6 conformance by checking an obscure detail of Proxy that\n * wasn't implemented correctly until after all other ES6 features in\n * most browsers.\n * @return {boolean} Whether Proxy works correctly.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkEs6ConformanceViaProxy = function() {\n  try {\n    var proxied = {};\n    var proxy = Object.create(new $jscomp.global['Proxy'](proxied, {\n      'get': function (target, key, receiver) {\n        return target == proxied && key == 'q' && receiver == proxy;\n      }\n    }));\n    return proxy['q'] === true;\n  } catch (err) {\n    return false;\n  }\n};\n\n/**\n * If this is true, assume that a runtime which implements Proxy also\n * implements the rest of the ECMAScript 2015 spec.\n * @define {boolean}\n */\n$jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS = false;\n\n/**\n * Whether the runtime implements the entire ECMAScript 2015 spec.\n * @const {boolean}\n */\n$jscomp.ES6_CONFORMANCE =\n    $jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS &&\n    $jscomp.checkEs6ConformanceViaProxy();\n","js/es6/execute_async_generator.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime logic for transpiled async functions.\n * @suppress {uselessCode}\n */\n'require base';\n'require es6/generator_engine';\n\n/**\n * Handles the execution of an async function.\n *\n * An async function, foo(a, b), will be rewritten as:\n *\n * ```\n * function foo(a, b) {\n *   let $jscomp$async$this = this;\n *   let $jscomp$async$arguments = arguments;\n *   let $jscomp$async$super$get$x = () => super.x;\n *   function* $jscomp$async$generator() {\n *     // original body of foo() with:\n *     // - await (x) replaced with yield (x)\n *     // - arguments replaced with $jscomp$async$arguments\n *     // - this replaced with $jscomp$async$this\n *     // - super.x replaced with $jscomp$async$super$get$x()\n *     // - super.x(5) replaced with  $jscomp$async$super$get$x()\n *     //      .call($jscomp$async$this, 5)\n *   }\n *   return $jscomp.executeAsyncGenerator($jscomp$async$generator());\n * }\n * ```\n * @param {!Generator<?>} generator\n * @return {!Promise<?>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.asyncExecutePromiseGenerator = function(generator) {\n  function passValueToGenerator(value) {\n    return generator.next(value);\n  }\n\n  function passErrorToGenerator(error) {\n    return generator.throw(error);\n  }\n\n  return new Promise(function(resolve, reject) {\n    function handleGeneratorRecord(/** !IIterableResult<*> */ genRec) {\n      if (genRec.done) {\n        resolve(genRec.value);\n      } else {\n        // One can await a non-promise, so genRec.value\n        // might not already be a promise.\n        Promise.resolve(genRec.value)\n            .then(passValueToGenerator, passErrorToGenerator)\n            .then(handleGeneratorRecord, reject);\n      }\n    }\n\n    handleGeneratorRecord(generator.next());\n  });\n};\n\n/**\n * Handles the execution of a generator function returning promises.\n *\n * An async function, foo(a, b), will be rewritten as:\n *\n * ```\n * function foo(a, b) {\n *   let $jscomp$async$this = this;\n *   let $jscomp$async$arguments = arguments;\n *   let $jscomp$async$super$get$x = () => super.x;\n *   return $jscomp.asyncExecutePromiseGeneratorFunction(\n *       function* () {\n *         // original body of foo() with:\n *         // - await (x) replaced with yield (x)\n *         // - arguments replaced with $jscomp$async$arguments\n *         // - this replaced with $jscomp$async$this\n *         // - super.x replaced with $jscomp$async$super$get$x()\n *         // - super.x(5) replaced with  $jscomp$async$super$get$x()\n *         //      .call($jscomp$async$this, 5)\n *       });\n * }\n * ```\n * @param {function(): !Generator<?>} generatorFunction\n * @return {!Promise<?>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.asyncExecutePromiseGeneratorFunction = function(generatorFunction) {\n  return $jscomp.asyncExecutePromiseGenerator(generatorFunction());\n};\n\n/**\n * Handles the execution of a state machine program that represents transpiled\n * async function.\n *\n * @final\n * @param {function(!$jscomp.generator.Context<?>): (void|{value: ?})} program\n * @return {!Promise<?>}\n * @suppress {reportUnknownTypes, visibility}\n */\n$jscomp.asyncExecutePromiseGeneratorProgram = function(program) {\n  return $jscomp.asyncExecutePromiseGenerator(\n      new $jscomp.generator.Generator_(\n          new $jscomp.generator.Engine_(\n              program)));\n};\n","js/es6/generator_engine.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n'require es6/util/setprototypeof';\n'require es6/util/makeiterator';\n\n/**\n * @fileoverview Implementation for $jscomp.generator\n *\n * This closure-compiler internal JavaScript library provides an ES3-compatible\n * API for writing generator functions using a minimum of boilerplate.\n *\n * Example:\n * ```javascript\n * // yields numbers starting with the given value, then incrementing by the\n * // value supplied to the next() method until the computed value is <= min or\n * // >= max. Then it returns the total number of times it yielded.\n * // If the client code calls throw(), the error will be logged and then\n * // yielded, but the generator won't terminate.\n * function *es6Definition(start, min, max) {\n *   let currentValue = start;\n *   let yieldCount = 0;\n *   while (currentValue > min && currentValue < max) {\n *     try {\n *       currentValue += yield(currentValue);\n *     } catch (e) {\n *       yield(e);\n *       console.log('client threw error', e);\n *     } finally {\n *       yieldCount++;\n *     }\n *   }\n *   return [yieldCount, currentValue];\n * }\n *\n * function es3Definition(start, min, max) {\n *   var currentValue;\n *   var yieldCount;\n *   var e;\n *\n *   return $jscomp.generator.createGenerator(\n *       es3Definition,\n *       function (context$) {\n *         switch (context$.nextAddress) {\n *           case 1: // execution always starts with 1\n *             currentValue = start;\n *             yieldCount = 0;\n *             // fall-through\n *\n *           case 2:\n *             if (!(currentValue > min && currentValue < max)) {\n *               // exit while loop:\n *               return context$.jumpTo(3);\n *             }\n *             // try {\n *             JSCompiler_temp_const$jscomp$1 = currentValue;\n *             context$.setCatchFinallyBlocks(4, 5);\n *             return context$.yield(currentValue, 7);\n *\n *           case 7:\n *             currentValue =\n *                 JSCompiler_temp_const$jscomp$1 + context$.yieldResult;\n *             // fall-through: execute finally block\n *\n *           case 5: // finally block start\n *             context$.enterFinallyBlock();\n *             yieldCount++;\n *             return context$.leaveFinallyBlock(6);\n *\n *           case 4: // catch block start\n *             e = context$.enterCatchBlock();\n *             return context$.yield(e, 8);\n *\n *           case 8: // finish catch block\n *             console.log('client threw error', e);\n *             return context$.jumpTo(5);\n *\n *           case 6:\n *             context$.jumpTo(2);\n *             break;\n *\n *           case 3:\n *             // come back here when while loop block exits\n *             return context$.return([yieldCount, currentValue]);\n *         }\n *       }\n *   });\n * };\n * ```\n */\n\n/** @const */\n$jscomp.generator = {};\n\n/**\n * Ensures that the iterator result is actually an object.\n *\n * @private\n * @final\n * @param {*} result\n * @return {void}\n * @throws {TypeError} if the result is not an instenace of Object.\n */\n$jscomp.generator.ensureIteratorResultIsObject_ = function(result) {\n  if (result instanceof Object) {\n    return;\n  }\n  throw new TypeError('Iterator result ' + result + ' is not an object');\n};\n\n\n/**\n * Tracks state machine state used by generator.Engine.\n *\n * @template VALUE\n * @constructor\n * @final\n * @struct\n */\n$jscomp.generator.Context = function() {\n  /**\n   * Whether the generator program is being executed at the moment in the\n   * current context. Is used to prevent reentrancy.\n   *\n   * @private\n   * @type {boolean}\n   */\n  this.isRunning_ = false;\n\n  /**\n   * An iterator that should yield all its values before the main program can\n   * continue.\n   *\n   * @private\n   * @type {?Iterator<VALUE>}\n   */\n  this.yieldAllIterator_ = null;\n\n  /**\n   * The value that will be sent to the program as the result of suspended\n   * yield expression.\n   *\n   * @type {?}\n   */\n  this.yieldResult = undefined;\n\n  /**\n   * The next address where the state machine execution should be resumed.\n   *\n   * <p>Program execution starts at 1 and ends at 0.\n   *\n   * @type {number}\n   */\n  this.nextAddress = 1;\n\n  /**\n   * The address that should be executed once an exception is thrown.\n   *\n   * <p>Value of 0 means no catch block exist that would handles an exception.\n   *\n   * @private\n   * @type {number}\n   */\n  this.catchAddress_ = 0;\n\n  /**\n   * The address that should be executed once the result is being returned\n   * or if the exception is thrown and there is no catchAddress specified.\n   *\n   * <p>Value of 0 means no finally block is set.\n   *\n   * @private\n   * @type {number}\n   */\n  this.finallyAddress_ = 0;\n\n  /**\n   * Stores information for the runtime propagation of values and control\n   * flow such as the behaviour of statements (break, continue, return and\n   * throw) that perform nonlocal transfers of control.\n   *\n   * @private\n   * @type {null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}}.\n   */\n  this.abruptCompletion_ = null;\n\n  /**\n   * The preserved abruptCompletion_ when entering a `finally` block. If\n   * the `finally` block completes normally the preserved abruptCompletion_ is\n   * restored:\n   * <pre>\n   * try {\n   * } finally {  // nesting level 0\n   *   // abruptCompletion_ is saved in finallyContexts_[0]\n   *   try {\n   *   } finally {  // nesting level 1\n   *     // abruptCompletion_ is saved in finallyContexts_[1]\n   *     ...\n   *     // abruptCompletion_ is restored from finallyContexts_[1]\n   *   }\n   *   // abruptCompletion_ is restored from finallyContexts_[0]\n   * }\n   * <pre>\n   *\n   * @private\n   * @type {?Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}.\n   */\n  this.finallyContexts_ = null;\n};\n\n/**\n * Marks generator program as being run.\n *\n * @private\n * @final\n * @return {void}\n * @throws {TypeError} if generator is already running.\n */\n$jscomp.generator.Context.prototype.start_ = function() {\n  if (this.isRunning_) {\n    throw new TypeError('Generator is already running');\n  }\n  this.isRunning_ = true;\n};\n\n/**\n *\n *\n * @private\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.stop_ = function() {\n  this.isRunning_ = false;\n};\n\n/**\n * Transfers program execution to an appropriate catch/finally block that\n * should be executed if exception occurs.\n *\n * @private\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpToErrorHandler_ = function() {\n  this.nextAddress = this.catchAddress_ || this.finallyAddress_;\n};\n\n/**\n * Sets the result of suspended yield expression.\n *\n * @private\n * @final\n * @param {?=} value The value to send to the generator.\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.next_ = function(value) {\n  this.yieldResult = value;\n};\n\n/**\n * Throws exception as the result of suspended yield.\n *\n * @private\n * @final\n * @param {?} e\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.throw_ = function(e) {\n  this.abruptCompletion_ = {exception: e, isException: true};\n  this.jumpToErrorHandler_();\n};\n\n/**\n * Returns a value as the result of generator function.\n *\n * @final\n * @param {VALUE=} value\n * @return {void}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.return = function(value) {\n  this.abruptCompletion_ = {return: /** @type {VALUE} */ (value)};\n  this.nextAddress = this.finallyAddress_;\n};\n\n/**\n * Changes the context so the program execution will continue from the given\n * state after executing nessesary pending finally blocks first.\n *\n * @final\n * @param {number} nextAddress The state that should be run.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpThroughFinallyBlocks = function(\n    nextAddress) {\n  this.abruptCompletion_ = {jumpTo: nextAddress};\n  this.nextAddress = this.finallyAddress_;\n};\n\n/**\n * Pauses the state machine program assosiated with generator function to yield\n * a value.\n *\n * @final\n * @param {VALUE} value The value to return from the generator function via\n *     the iterator protocol.\n * @param {number} resumeAddress The address where the program should resume.\n * @return {{value: VALUE}}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.yield = function(value, resumeAddress) {\n  this.nextAddress = resumeAddress;\n  return {value: value};\n};\n\n/**\n * Causes the state machine program to yield all values from an iterator.\n *\n * @final\n * @param {string|!Iterator<VALUE>|!Iterable<VALUE>|!Arguments} iterable\n *     Iterator to yeild all values from.\n * @param {number} resumeAddress The address where the program should resume.\n * @return {void | {value: VALUE}}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.yieldAll = function(\n    iterable, resumeAddress) {\n  /** @const @type {!Iterator<VALUE>} */ var iterator =\n      $jscomp.makeIterator(iterable);\n  /** @const */ var result = iterator.next();\n  $jscomp.generator.ensureIteratorResultIsObject_(result);\n  if (result.done) {\n    // If `someGenerator` in `x = yield *someGenerator` completes immediately,\n    // x is the return value of that generator.\n    this.yieldResult = result.value;\n    this.nextAddress = resumeAddress;\n    return;\n  }\n  this.yieldAllIterator_ = iterator;\n  return this.yield(result.value, resumeAddress);\n};\n\n/**\n * Changes the context so the program execution will continue from the given\n * state.\n *\n * @final\n * @param {number} nextAddress The state the program should continue\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpTo = function(nextAddress) {\n  this.nextAddress = nextAddress;\n};\n\n/**\n * Changes the context so the program execution ends.\n *\n * @final\n * @return {void}\n */\n$jscomp.generator.Context.prototype.jumpToEnd = function() {\n  this.nextAddress = 0;\n};\n\n/**\n * Sets catch / finally handlers.\n * Used for try statements with catch blocks.\n *\n * @final\n * @param {number} catchAddress The address of the catch block.\n * @param {number=} finallyAddress The address of the finally block.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.setCatchFinallyBlocks = function(\n    catchAddress, finallyAddress) {\n  this.catchAddress_ = catchAddress;\n  if (finallyAddress != undefined) {\n    this.finallyAddress_ = finallyAddress;\n  }\n};\n\n/**\n * Sets finally handler.\n * Used for try statements without catch blocks.\n *\n * @const\n * @param {number=} finallyAddress The address of the finally block or 0.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.setFinallyBlock = function(finallyAddress) {\n  this.catchAddress_ = 0;\n  this.finallyAddress_ = finallyAddress || 0;\n};\n\n/**\n * Sets a catch handler and jumps to the next address.\n * Used for try statements without finally blocks.\n *\n * @final\n * @param {number} nextAddress The state that should be run next.\n * @param {number=} catchAddress The address of the catch block or 0.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.leaveTryBlock = function(\n    nextAddress, catchAddress) {\n  this.nextAddress = nextAddress;\n  this.catchAddress_ = catchAddress || 0;\n};\n\n/**\n * Initializes exception variable in the beginning of catch block.\n *\n * @final\n * @param {number=} nextCatchBlockAddress The address of the next catch block\n *     that is preceded by no finally blocks.\n * @return {?} Returns an exception that was thrown from \"try\" block.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.enterCatchBlock = function(\n    nextCatchBlockAddress) {\n  this.catchAddress_ = nextCatchBlockAddress || 0;\n  /** @const */ var exception =\n      /** @type {{exception, isException: boolean}} */ (this.abruptCompletion_)\n          .exception;\n  this.abruptCompletion_ = null;\n  return exception;\n};\n\n/**\n * Saves the current throw context which will be restored at the end of finally\n * block.\n *\n * @final\n * @param {number=} nextCatchAddress\n * @param {number=} nextFinallyAddress\n * @param {number=} finallyDepth The nesting level of current \"finally\" block.\n * @return {void}\n */\n$jscomp.generator.Context.prototype.enterFinallyBlock = function(\n    nextCatchAddress, nextFinallyAddress, finallyDepth) {\n  if (!finallyDepth) {\n    this.finallyContexts_ = [this.abruptCompletion_];\n  } else {\n    /**\n     * @type {!Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}\n     */\n    (this.finallyContexts_)[finallyDepth] = this.abruptCompletion_;\n  }\n  this.catchAddress_ = nextCatchAddress || 0;\n  this.finallyAddress_ = nextFinallyAddress || 0;\n};\n\n/**\n * Figures out whether the program execution should continue normally, or jump\n * to the closest catch/finally block.\n *\n * @final\n * @param {number} nextAddress The state that should be run next.\n * @param {number=} finallyDepth The nesting level of current \"finally\" block.\n * @return {void}\n * @suppress {strictMissingProperties}\n */\n$jscomp.generator.Context.prototype.leaveFinallyBlock = function(\n    nextAddress, finallyDepth) {\n  // There could be trailing finally contexts if a nested finally throws an\n  // exception or return.\n  // e.g.\n  // try {\n  //   ...\n  //   return 1;\n  // } finally {\n  //   // finallyDepth == 0\n  //   // finallyContext == [{return: 1}]\n  //   try {\n  //     ...\n  //     try {\n  //       throw new Error(2);\n  //     } finally {\n  //       // finallyDepth == 1\n  //       // finallyContext == [{return: 1}, {exception: Error(2)}]\n  //       try {\n  //         throw new Error(3);\n  //       } finally {\n  //         // finallyDepth == 2\n  //         // finallyContext == [\n  //         //     {return: 1},\n  //         //     {exception: Error(2)},\n  //         //     {exception: Error(3)}\n  //         // ]\n  //         throw new Error(4); // gets written in abruptCompletion_\n  //         // leaveFinallyBlock() never gets called here\n  //       }\n  //       // leaveFinallyBlock() never gets called here\n  //     }\n  //   } catch (e) {\n  //      // swallow error\n  //      // abruptCompletion becomes null\n  //   } finally {\n  //     // finallyDepth == 1\n  //     // finallyContext == [\n  //     //     {return: 1},\n  //     //     null, // overwritten, because catch swallowed the error\n  //     //     {exception: Error(3)}  // left over\n  //     // ]\n  //     // leaveFinallyBlock() called here\n  //     // finallyContext == [{return: 1}]\n  //     // abruptCompletion == null\n  //   }\n  //   // leaveFinallyBlock() called here\n  //   // finallyContext = []\n  //   // abruptCompletion == {return: 1};\n  // }\n  /** @const */ var preservedContext =\n      /**\n       * @type {!Array<null|{return: VALUE}|{exception, isException: boolean}|{jumpTo: number}>}\n       */\n      (this.finallyContexts_).splice(finallyDepth || 0)[0];\n  /** @const */ var abruptCompletion = this.abruptCompletion_ =\n      this.abruptCompletion_ || preservedContext;\n  if (abruptCompletion) {\n    if (abruptCompletion.isException) {\n      return this.jumpToErrorHandler_();\n    }\n    // Check if there is a pending break/continue jump that is not preceded by\n    // finally blocks that should be executed before.\n    // We always generate case numbers for the start and end of loops before\n    // numbers for anything they contain, so any finally blocks within will be\n    // guaranteed to have higher addresses than the loop break and continue\n    // positions.\n    // e.g.\n    // l1: while (...) {            // generated addresses: 100: break l1;\n    //       try {                  // generated addresses: 101: finally,\n    //         try {                // generated addresses: 102: finally,\n    //           l2: while (...) {  // generated addresses: 103: break l2;\n    //\n    //                 if (...) {\n    //                   break l1;  // becomes\n    //                              // $context.jumpThroughFinallyBlocks(101),\n    //                              // since 2 finally blocks must be crossed\n    //                 }\n    //                 break l2;    // becomes $context.jumpTo(103)\n    //               }\n    //         } finally {\n    //           // When leaving this finally block:\n    //           // 1. We keep the abrupt completion indicating 'break l1'\n    //           // 2. We jump to the enclosing finally block.\n    //         }\n    //       } finally {\n    //         // When leaving this finally block:\n    //         // 1. We complete the abruptCompletion indicating 'break l1' by\n    //         //   jumping to the loop start address.\n    //         // 2. Abrupt completion is now null, so normal execution\n    //         //   continues from there.\n    //       }\n    //     }\n    if (abruptCompletion.jumpTo != undefined &&\n        this.finallyAddress_ < abruptCompletion.jumpTo) {\n      this.nextAddress = abruptCompletion.jumpTo;\n      this.abruptCompletion_ = null;\n    } else {\n      this.nextAddress = this.finallyAddress_;\n    }\n  } else {\n    this.nextAddress = nextAddress;\n  }\n};\n\n/**\n * Is used in transpilation of `for in` statements.\n *\n * <p><code>for (var i in obj) {...}</code> becomes:\n * <pre>\n * for (var i, $for$in = context$.forIn(obj);\n *      (i = $for$in.getNext()) != null;\n *      ) {\n *   ...\n * }\n * </pre>\n *\n * @final\n * @param {?} object\n * @return {!$jscomp.generator.Context.PropertyIterator}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.prototype.forIn = function(object) {\n  return new $jscomp.generator.Context.PropertyIterator(object);\n};\n\n/**\n * @constructor\n * @final\n * @struct\n * @param {?} object\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.PropertyIterator = function(object) {\n  /**\n   * @private\n   * @const\n   * @type {?}\n   */\n  this.object_ = object;\n\n  /**\n   * @private\n   * @const\n   * @type {!Array<string>}\n   */\n  this.properties_ = [];\n\n  for (var property in /** @type {!Object} */ (object)) {\n    this.properties_.push(property);\n  }\n  this.properties_.reverse();\n};\n\n/**\n * Returns the next object's property that is still valid.\n *\n * @final\n * @return {?string}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Context.PropertyIterator.prototype.getNext = function() {\n  // The JS spec does not require that properties added after the loop begins\n  // be included in the loop, but it does require that the current property\n  // must still exist on the object when the loop iteration starts.\n  while (this.properties_.length > 0) {\n    /** @const */ var property = this.properties_.pop();\n    if (property in /** @type {!Object} */ (this.object_)) {\n      return property;\n    }\n  }\n  return null;\n};\n\n/**\n * Engine handling execution of a state machine associated with the generator\n * program and its context.\n *\n * @private\n * @template VALUE\n * @constructor\n * @final\n * @struct\n * @param {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})} program\n */\n$jscomp.generator.Engine_ = function(program) {\n  /**\n   * @private\n   * @const\n   * @type {!$jscomp.generator.Context<VALUE>}\n   */\n  this.context_ = new $jscomp.generator.Context();\n\n  /**\n   * @private\n   * @const\n   * @type {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})}\n   */\n  this.program_ = program;\n};\n\n/**\n * Returns an object with two properties done and value.\n * You can also provide a parameter to the next method to send a value to the\n * generator.\n *\n * @private\n * @final\n * @param {?=} value The value to send to the generator.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.next_ = function(value) {\n  this.context_.start_();\n  if (this.context_.yieldAllIterator_) {\n    return this.yieldAllStep_(\n        this.context_.yieldAllIterator_.next, value, this.context_.next_);\n  }\n  this.context_.next_(value);\n  return this.nextStep_();\n};\n\n/**\n * Attempts to finish the generator with a given value.\n *\n * @private\n * @final\n * @param {VALUE} value The value to return.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.return_ = function(value) {\n  this.context_.start_();\n  /** @const */ var yieldAllIterator = this.context_.yieldAllIterator_;\n  if (yieldAllIterator) {\n    /** @const @type {function(VALUE): !IIterableResult<VALUE>} */ var\n        returnFunction =\n            'return' in yieldAllIterator ? yieldAllIterator['return'] :\n                                           function(v) {\n                                             return {value: v, done: true};\n                                           };\n    return this.yieldAllStep_(returnFunction, value, this.context_.return);\n  }\n  this.context_.return(value);\n  return this.nextStep_();\n};\n\n/**\n * Resumes the execution of a generator by throwing an error into it and\n * returns an object with two properties done and value.\n *\n * @private\n * @final\n * @param {?} exception The exception to throw.\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.throw_ = function(exception) {\n  this.context_.start_();\n  if (this.context_.yieldAllIterator_) {\n    return this.yieldAllStep_(\n        this.context_.yieldAllIterator_['throw'], exception,\n        this.context_.next_);\n  }\n  this.context_.throw_(exception);\n  return this.nextStep_();\n};\n\n/**\n * Redirects next/throw/return method calls to an iterator passed to \"yield *\".\n *\n * @private\n * @final\n * @template T\n * @param {function(this:Iterator<VALUE>, T): !IIterableResult<VALUE>} action\n * @param {T} value\n * @param {function(this:$jscomp.generator.Context, VALUE): void} nextAction\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Engine_.prototype.yieldAllStep_ = function(\n    action, value, nextAction) {\n  try {\n    /** @const */ var result = action.call(\n        /** @type {!Iterator<VALUE>} */ (this.context_.yieldAllIterator_),\n        value);\n    $jscomp.generator.ensureIteratorResultIsObject_(result);\n    if (!result.done) {\n      this.context_.stop_();\n      return result;\n    }\n    // After `x = yield *someGenerator()` x is the return value of the\n    // generator, not a value passed to this generator by the next() method.\n    /** @const */ var resultValue = result.value;\n  } catch (e) {\n    this.context_.yieldAllIterator_ = null;\n    this.context_.throw_(e);\n    return this.nextStep_();\n  }\n  this.context_.yieldAllIterator_ = null;\n  nextAction.call(this.context_, resultValue);\n  return this.nextStep_();\n};\n\n/**\n * Continues/resumes program execution until the next suspension point (yield).\n *\n * @private\n * @final\n * @return {!IIterableResult<VALUE>}\n * @suppress {reportUnknownTypes, strictMissingProperties}\n */\n$jscomp.generator.Engine_.prototype.nextStep_ = function() {\n  while (this.context_.nextAddress) {\n    try {\n      /** @const */ var yieldValue = this.program_(this.context_);\n      if (yieldValue) {\n        this.context_.stop_();\n        return {value: yieldValue.value, done: false};\n      }\n    } catch (e) {\n      this.context_.yieldResult = undefined;\n      this.context_.throw_(e);\n    }\n  }\n\n  this.context_.stop_();\n  if (this.context_.abruptCompletion_) {\n    /** @const */ var abruptCompletion = this.context_.abruptCompletion_;\n    this.context_.abruptCompletion_ = null;\n    if (abruptCompletion.isException) {\n      throw abruptCompletion.exception;\n    }\n    return {value: abruptCompletion.return, done: true};\n  }\n  return {value: /** @type {?} */ (undefined), done: true};\n};\n\n/**\n * The Generator object that is returned by a generator function and it\n * conforms to both the iterable protocol and the iterator protocol.\n *\n * @private\n * @template VALUE\n * @constructor\n * @final\n * @implements {Generator<VALUE>}\n * @param {!$jscomp.generator.Engine_<VALUE>} engine\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.Generator_ = function(engine) {\n  /** @const @override */\n  this.next = function(opt_value) {\n    return engine.next_(opt_value);\n  };\n\n  /** @const @override */\n  this.throw = function(exception) {\n    return engine.throw_(exception);\n  };\n\n  /** @const @override */\n  this.return = function(value) {\n    return engine.return_(value);\n  };\n\n  /** @this {$jscomp.generator.Generator_<VALUE>} */\n  this[Symbol.iterator] = function() {\n    return this;\n  };\n\n  // TODO(skill): uncomment once Symbol.toStringTag is polyfilled:\n  // this[Symbol.toStringTag] = 'Generator';\n};\n\n/**\n * Creates a generator backed up by Engine running a given program.\n *\n * @final\n * @template VALUE\n * @param {function(this:?, ...): (!Iterator<VALUE>|!Iterable<VALUE>)} generator\n * @param {function(!$jscomp.generator.Context<VALUE>): (void|{value: VALUE})} program\n * @return {!Generator<VALUE>}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.generator.createGenerator = function(generator, program) {\n  /** @const */ var result =\n      new $jscomp.generator.Generator_(new $jscomp.generator.Engine_(program));\n  // The spec says that `myGenFunc() instanceof myGenFunc` must be true.\n  // We'll make this work by setting the prototype before calling the\n  // constructor every time. All of the methods of the object are defined on the\n  // instance by the constructor, so this does no harm.\n  // We also cast Generator_ to Object to hide dynamic inheritance from\n  // jscompiler, it makes ConformanceRules$BanUnknownThis happy.\n  // In some transpiled cases there may not be an explicit prototype, in which\n  // case we skip this step.\n  if ($jscomp.setPrototypeOf && generator.prototype) {\n    /** @type {function(!Object, ?Object): !Object} */ ($jscomp.setPrototypeOf)(\n        result, generator.prototype);\n  }\n  return result;\n};\n","js/es6/globalthis.js":"/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require util/global';\n\n$jscomp.polyfill('globalThis', function(orig) {\n  return orig || $jscomp.global;\n}, 'es_2020', 'es3');\n","js/es6/map.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","js/es6/math.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 Math polyfills.\n * @suppress {uselessCode}\n */\n'require es6/math/acosh';\n'require es6/math/asinh';\n'require es6/math/atanh';\n'require es6/math/cbrt';\n'require es6/math/clz32';\n'require es6/math/cosh';\n'require es6/math/expm1';\n'require es6/math/fround';\n'require es6/math/hypot';\n'require es6/math/imul';\n'require es6/math/log10';\n'require es6/math/log1p';\n'require es6/math/log2';\n'require es6/math/sign';\n'require es6/math/sinh';\n'require es6/math/tanh';\n'require es6/math/trunc';\n","js/es6/math/acosh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.acosh', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Computes the inverse hyperbolic cosine.\n   *\n   * <p>Polyfills the static function Math.acosh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The inverse hyperbolic cosine of x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    return Math.log(x + Math.sqrt(x * x - 1));\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/asinh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.asinh', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Computes the inverse hyperbolic sine.\n   *\n   * <p>Polyfills the static function Math.asinh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The inverse hyperbolic sine of x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (x === 0) return x;\n    var y = Math.log(Math.abs(x) + Math.sqrt(x * x + 1));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/atanh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/math/log1p';\n\n$jscomp.polyfill('Math.atanh', function(orig) {\n  if (orig) return orig;\n  var log1p = Math.log1p;\n\n  /**\n   * Computes the inverse hyperbolic tangent.\n   *\n   * <p>Polyfills the static function Math.atanh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The inverse hyperbolic tangent +x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    return (log1p(x) - log1p(-x)) / 2;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/cbrt.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.cbrt', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the cube root of the number, handling negatives safely.\n   *\n   * <p>Polyfills the static function Math.cbrt().\n   *\n   * @param {number} x Any number, or value that can be coerced into a number.\n   * @return {number} The cube root of x.\n   */\n  var polyfill = function(x) {\n    if (x === 0) return x;\n    x = Number(x);\n    var y = Math.pow(Math.abs(x), 1 / 3);\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/clz32.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.clz32', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Counts the leading zeros in the 32-bit binary representation.\n   *\n   * <p>Polyfills the static function Math.clz32().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The number of leading zero bits.\n   */\n  var polyfill = function(x) {\n    // This binary search algorithm is taken from v8.\n    x = Number(x) >>> 0;  // first ensure we have a 32-bit unsigned integer.\n    if (x === 0) return 32;\n    var result = 0;\n    if ((x & 0xFFFF0000) === 0) {\n      x <<= 16;\n      result += 16;\n    }\n    if ((x & 0xFF000000) === 0) {\n      x <<= 8;\n      result += 8;\n    }\n    if ((x & 0xF0000000) === 0) {\n      x <<= 4;\n      result += 4;\n    }\n    if ((x & 0xC0000000) === 0) {\n      x <<= 2;\n      result += 2;\n    }\n    if ((x & 0x80000000) === 0) result++;\n    return result;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/cosh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.cosh', function(orig) {\n  if (orig) return orig;\n  var exp = Math.exp;\n\n  /**\n   * Computes the hyperbolic cosine.\n   *\n   * <p>Polyfills the static function Math.cosh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The hyperbolic cosine of x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    return (exp(x) + exp(-x)) / 2;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/expm1.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implements Math.expm1 polyfill\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n\n$jscomp.polyfill('Math.expm1', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Exponentiates x and then subtracts one.  This is implemented in a\n   * way that is accurate for numbers close to zero.\n   *\n   * <p>Polyfills the static function Math.expm1().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The exponential of x, less 1.\n   */\n  var polyfill = function(x) {\n    // This implementation is based on the Taylor expansion\n    //   exp(x) ~ 1 + x + x^2/2 + x^3/6 + x^4/24 + ...\n    x = Number(x);\n    if (x < .25 && x > -.25) {\n      var y = x;\n      var d = 1;\n      var z = x;\n      var zPrev = 0;\n      while (zPrev != z) {\n        y *= x / (++d);\n        z = (zPrev = z) + y;\n      }\n      return z;\n    }\n    return Math.exp(x) - 1;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/fround.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require util/defines';\n\n$jscomp.polyfill('Math.fround', function(orig) {\n  if (orig) return orig;\n\n  if ($jscomp.SIMPLE_FROUND_POLYFILL || typeof Float32Array !== 'function') {\n    // Explicitly requested a no-op polyfill, or Float32Array not available.\n    return /** @return {number} */ function(/** number */ arg) {\n      return arg;\n    };\n  }\n\n  var arr = new Float32Array(1);\n  /**\n   * Rounds the given double-precision number to single-precision (float32).\n   *\n   * Polyfills the static function Math.fround().\n   *\n   * This polyfill is slightly incorrect for IE8 and IE9, where it performs no\n   * rounding at all. This is generally not a problem, since Math.fround is\n   * primarily used for optimization (to force faster 32-bit operations rather\n   * than 64-bit), but in cases where (a) the logic actually depends on a\n   * correct fround implementation and (b) the application targets very old\n   * browsers, this polyfill will be insufficient.  For that case, see\n   * https://gist.github.com/shicks/7a97ec6b3f10212e60a89a7f6d2d097d for a\n   * more correct polyfill that does not depend on Float32Array.\n   *\n   * @param {number} arg A 64-bit double-precision number.\n   * @return {number} The closest float32 to the argument.\n   */\n  var polyfill = function(arg) {\n    arr[0] = arg;\n    return arr[0];\n  };\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/hypot.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.hypot', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the sum of its arguments in quadrature.\n   *\n   * <p>Polyfills the static function Math.hypot().\n   *\n   * @param {...number} var_args Any number, or value that can be coerced to a\n   *     number.\n   * @return {number} The square root of the sum of the squares.\n   */\n  var polyfill = function(var_args) {\n    if (arguments.length < 2) {\n      return arguments.length ? Math.abs(arguments[0]) : 0;\n    }\n\n    var i, z, sum, max;\n    // Note: we need to normalize the numbers in case of over/underflow.\n    for (max = 0, i = 0; i < arguments.length; i++) {\n      max = Math.max(max, Math.abs(arguments[i]));\n    }\n    // TODO(sdh): Document where these constants come from.\n    if (max > 1e100 || max < 1e-100) {\n      if (!max) return max; // Handle 0 and NaN before trying to divide.\n      sum = 0;\n      for (i = 0; i < arguments.length; i++) {\n        z = Number(arguments[i]) / max;\n        sum += z * z;\n      }\n      return Math.sqrt(sum) * max;\n    } else {\n      sum = 0;\n      for (i = 0; i < arguments.length; i++) {\n        z = Number(arguments[i]);\n        sum += z * z;\n      }\n      return Math.sqrt(sum);\n    }\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/imul.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.imul', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Performs C-like 32-bit signed integer multiplication.\n   *\n   * <p>Polyfills the static function Math.imul().\n   *\n   * @param {number} a Any number, or value that can be coerced to a number.\n   * @param {number} b Any number, or value that can be coerced to a number.\n   * @return {number} The 32-bit integer product of a and b.\n   */\n  var polyfill = function(a, b) {\n    // This algorithm is taken from v8.\n    // Note: If multiplication overflows 32 bits, then we risk losing\n    // precision.  We must therefore break the inputs into 16-bit\n    // words and multiply separately.\n    a = Number(a);\n    b = Number(b);\n    var ah = (a >>> 16) & 0xFFFF;  // Treat individual words as unsigned\n    var al = a & 0xFFFF;\n    var bh = (b >>> 16) & 0xFFFF;\n    var bl = b & 0xFFFF;\n    var lh = ((ah * bl + al * bh) << 16) >>> 0;  // >>> 0 casts to uint\n    return (al * bl + lh) | 0;  // | 0 casts back to signed\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/log10.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.log10', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the base-10 logarithm.\n   *\n   * <p>Polyfills the static function Math.log10().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The common log of x.\n   */\n  var polyfill = function(x) {\n    return Math.log(x) / Math.LN10;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/log1p.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.log1p', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the natural logarithm of 1+x, implemented in a way that is\n   * accurate for numbers close to zero.\n   *\n   * <p>Polyfills the static function Math.log1p().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The natural log of 1+x.\n   */\n  var polyfill = function(x) {\n    // This implementation is based on the Taylor expansion\n    //   log(1 + x) ~ x - x^2/2 + x^3/3 - x^4/4 + x^5/5 - ...\n    x = Number(x);\n    if (x < 0.25 && x > -0.25) {\n      var y = x;\n      var d = 1;\n      var z = x;\n      var zPrev = 0;\n      var s = 1;\n      while (zPrev != z) {\n        y *= x;\n        s *= -1;\n        z = (zPrev = z) + s * y / (++d);\n      }\n      return z;\n    }\n    return Math.log(1 + x);\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/log2.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.log2', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the base-2 logarithm.\n   *\n   * <p>Polyfills the static function Math.log2().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The base-2 log of x.\n   */\n  var polyfill = function(x) {\n    return Math.log(x) / Math.LN2;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/sign.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.sign', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the sign of the number, indicating whether it is\n   * positive, negative, or zero.\n   *\n   * <p>Polyfills the static function Math.sign().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The sign, +1 if x is positive, -1 if x is\n   *     negative, or 0 if x is zero.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    return x === 0 || isNaN(x) ? x : x > 0 ? 1 : -1;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/sinh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.sinh', function(orig) {\n  if (orig) return orig;\n  var exp = Math.exp;\n\n  /**\n   * Computes the hyperbolic sine.\n   *\n   * <p>Polyfills the static function Math.sinh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The hyperbolic sine of x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (x === 0) return x;\n    return (exp(x) - exp(-x)) / 2;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/tanh.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.tanh', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Computes the hyperbolic tangent.\n   *\n   * <p>Polyfills the static function Math.tanh().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number} The hyperbolic tangent of x.\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (x === 0) return x;\n    // Ensure exponent is negative to prevent overflow.\n    var y = Math.exp(-2 * Math.abs(x));\n    var z = (1 - y) / (1 + y);\n    return x < 0 ? -z : z;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/math/trunc.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/modules/runtime.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Light weight implementation of a module loader that is based on\n * CommonJS.\n *\n * This is meant to be used by the Closure Library to help debug load transpiled\n * ES6 modules. Closure can transpile ES6 modules to a function that is\n * compatible with registerModule. Then it can call the global $jscomp.require\n * when it wants to retrieve a reference to the module object.\n *\n * Example:\n * \"import {x} from './other.js'; export {x as Y}; use(x);\"\n *\n * Might be transpiled as:\n *\n * $jscomp.registerModule(function($$exports, $$require, $$module) {\n *   Object.defineProperties($$exports, {\n *     Y: enumerable: true, get: function() { return module$other.x }\n *   });\n *   const module$other = $$require('./other.js');\n *   use(module$other.x);\n * }, 'example.js', ['./other.js']);\n *\n * @suppress {uselessCode} The require statements below are not useless.\n */\n\n'require base';\n'require es6/map';\n'require es6/set';\n'require util/global';\n\n(function() {\n/**\n * @param {string} id\n * @param {?=} opt_exports\n *\n * @struct @constructor @final\n */\nvar Module = function(id, opt_exports) {\n  /** @const {string} */\n  this.id = id;\n  /** @type {?} */\n  this.exports = opt_exports || {};\n};\n\n\n/**\n * @param {?} other\n */\nModule.prototype.exportAllFrom = function(other) {\n  var module = this;\n  var define = {};\n  for (var key in other) {\n    if (key == 'default' || key in module.exports || key in define) {\n      continue;\n    }\n    define[key] = {\n      enumerable: true,\n      get: (function(key) {\n        return function() {\n          return other[key];\n        };\n      })(key)\n    };\n  }\n  $jscomp.global.Object.defineProperties(module.exports, define);\n};\n\n\n/**\n * @param {?function(function(string), ?, !Module)} def The module definition\n *     function which has the arguments (require, exports, module).\n * @param {!Module} module\n * @param {string} path\n *\n * @struct @constructor @final\n */\nvar CacheEntry = function(def, module, path) {\n  /** @type {?function(function(string), ?, !Module)} */\n  this.def = def;\n  /** @type {!Module} */\n  this.module = module;\n  /** @type {string} */\n  this.path = path;\n  /** @const {!Set<string>} */\n  this.blockingDeps = new Set();\n};\n\n\n/**\n * Loads the module by calling its module definition function if it has not\n * already been loaded.\n *\n * @return {?} The module's exports property.\n */\nCacheEntry.prototype.load = function() {\n  if (this.def) {\n    var def = this.def;\n    this.def = null;\n    callRequireCallback(def, this.module);\n  }\n\n  return this.module.exports;\n};\n\n\n/**\n * @param {function(function(string), ?, !Module)|function(function(string))}\n *     callback A module definition function with arguments (require, exports,\n *     module) or a require.ensure callback which has the argument (require).\n * @param {!Module=} opt_module If provided then the callback is assumed to be\n *     this module's definition function.\n */\nfunction callRequireCallback(callback, opt_module) {\n  var oldPath = currentModulePath;\n\n  try {\n    if (opt_module) {\n      currentModulePath = opt_module.id;\n      callback.call(\n          opt_module, createRequire(opt_module), opt_module.exports,\n          opt_module);\n    } else {\n      callback($jscomp.require);\n    }\n  } finally {\n    currentModulePath = oldPath;\n  }\n}\n\n\n/** @type {!Map<string, !CacheEntry>} */\nvar moduleCache = new Map();\n\n\n/** @type {string} */\nvar currentModulePath = '';\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n *\n * @param {string} path\n * @return {string}\n */\nfunction normalizePath(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (\n        i && components[i] == '..' && components[i - 1] &&\n        components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n}\n\n\n/** @return {?string} */\n$jscomp.getCurrentModulePath = function() {\n  return currentModulePath;\n};\n\n\n/**\n * @param {string} id\n * @return {!CacheEntry}\n */\nfunction getCacheEntry(id) {\n  var cacheEntry = moduleCache.get(id);\n  if (cacheEntry === undefined) {\n    throw new Error('Module ' + id + ' does not exist.');\n  }\n  return cacheEntry;\n}\n\n\n/**\n * Map of absolute module path to list of require.ensure callbacks waiting for\n * the given module to load.\n *\n * @const {!Map<string, !Array<!CallbackEntry>>}\n */\nvar ensureMap = new Map();\n\n\n/**\n * @param {!Set<string>} requireSet\n * @param {function(function(string))} callback\n *\n * @struct @constructor @final\n */\nvar CallbackEntry = function(requireSet, callback) {\n  /** @const */\n  this.requireSet = requireSet;\n  /** @const */\n  this.callback = callback;\n};\n\n\n/**\n * Normalizes two paths if the second is relative.\n *\n * @param {string} root\n * @param {string} absOrRelativePath\n * @return {string}\n */\nfunction maybeNormalizePath(root, absOrRelativePath) {\n  if (absOrRelativePath.startsWith('./') ||\n      absOrRelativePath.startsWith('../')) {\n    return normalizePath(root + '/../' + absOrRelativePath);\n  } else {\n    return absOrRelativePath;\n  }\n}\n\n\n/**\n * Creates a require function which resolves paths against the given module, if\n * any.\n *\n * @param {!Module=} opt_module\n * @return {function(string):?}\n */\nfunction createRequire(opt_module) {\n  /**\n   * @param {string} absOrRelativePath\n   * @return {?}\n   */\n  function require(absOrRelativePath) {\n    var absPath = absOrRelativePath;\n    if (opt_module) {\n      absPath = maybeNormalizePath(opt_module.id, absPath);\n    }\n    return getCacheEntry(absPath).load();\n  }\n\n  /**\n   * @param {!Array<string>} requires\n   * @param {function(function(string))} callback\n   */\n  function requireEnsure(requires, callback) {\n    if (currentModulePath) {\n      for (var i = 0; i < requires.length; i++) {\n        requires[i] = maybeNormalizePath(currentModulePath, requires[i]);\n      }\n    }\n\n    var blockingRequires = [];\n    for (var i = 0; i < requires.length; i++) {\n      var required = moduleCache.get(requires[i]);\n      if (!required || required.blockingDeps.size) {\n        blockingRequires.push(requires[i]);\n      }\n    }\n\n    if (blockingRequires.length) {\n      var requireSet = new Set(blockingRequires);\n      var callbackEntry = new CallbackEntry(requireSet, callback);\n      requireSet.forEach(function(require) {\n        var arr = ensureMap.get(require);\n        if (!arr) {\n          arr = [];\n          ensureMap.set(require, arr);\n        }\n        arr.push(callbackEntry);\n      });\n    } else {\n      callback(require);\n    }\n  }\n  require.ensure = requireEnsure;\n\n  return require;\n}\n\n\n/** @const {function(string): ?} */\n$jscomp.require = createRequire();\n\n\n/**\n * @param {string} id\n * @return {boolean}\n */\n$jscomp.hasModule = function(id) {\n  return moduleCache.has(id);\n};\n\n\n/**\n * Marks the given module as being available and calls any require.ensure\n * callbacks waiting for it.\n *\n * @param {string} absModulePath\n */\nfunction markAvailable(absModulePath) {\n  var ensures = ensureMap.get(absModulePath);\n\n  if (ensures) {\n    for (var i = 0; i < ensures.length; i++) {\n      var entry = ensures[i];\n      entry.requireSet.delete(absModulePath);\n      if (!entry.requireSet.size) {\n        ensures.splice(i--, 1);\n        callRequireCallback(entry.callback);\n      }\n    }\n\n    if (!ensures.length) {\n      ensureMap.delete(absModulePath);\n    }\n  }\n}\n\n\n/**\n * Registers a CommonJS-like module for use with this runtime. Does not execute\n * the module until it is required.\n *\n * @param {function(function(string), ?, !Module)} moduleDef The module\n *     definition.\n * @param {string} absModulePath\n * @param {!Array<string>=} opt_shallowDeps List of dependencies this module\n *     directly depends on. Paths can be relative to the given module. This\n *     module will considered available until all of its dependencies are also\n *     available for require.\n */\n$jscomp.registerModule = function(moduleDef, absModulePath, opt_shallowDeps) {\n  if (moduleCache.has(absModulePath)) {\n    throw new Error(\n        'Module ' + absModulePath + ' has already been registered.');\n  }\n\n  if (currentModulePath) {\n    throw new Error('Cannot nest modules.');\n  }\n\n  var shallowDeps = opt_shallowDeps || [];\n  for (var i = 0; i < shallowDeps.length; i++) {\n    shallowDeps[i] = maybeNormalizePath(absModulePath, shallowDeps[i]);\n  }\n\n  var /** !Set<string> */ blockingDeps = new Set();\n  for (var i = 0; i < shallowDeps.length; i++) {\n    getTransitiveBlockingDepsOf(shallowDeps[i]).forEach(function(transitive) {\n      blockingDeps.add(transitive);\n    });\n  }\n\n  // Make sure this module isn't blocking itself in the event of a cycle.\n  blockingDeps.delete(absModulePath);\n\n  var cacheEntry =\n      new CacheEntry(moduleDef, new Module(absModulePath), absModulePath);\n  moduleCache.set(absModulePath, cacheEntry);\n\n  blockingDeps.forEach(function(blocker) {\n    addAsBlocking(cacheEntry, blocker);\n  });\n\n  if (!blockingDeps.size) {\n    markAvailable(cacheEntry.module.id);\n  }\n\n  removeAsBlocking(cacheEntry);\n};\n\n\n/**\n * @param {string} moduleId\n * @return {!Set<string>}\n */\nfunction getTransitiveBlockingDepsOf(moduleId) {\n  var cacheEntry = moduleCache.get(moduleId);\n  var /** !Set<string> */ blocking = new Set();\n\n  if (cacheEntry) {\n    cacheEntry.blockingDeps.forEach(function(dep) {\n      getTransitiveBlockingDepsOf(dep).forEach(function(transitive) {\n        blocking.add(transitive);\n      });\n    });\n  } else {\n    blocking.add(moduleId);\n  }\n\n  return blocking;\n}\n\n\n/** @const {!Map<string, !Set<!CacheEntry>>} */\nvar blockingModulePathToBlockedModules = new Map();\n\n\n/**\n * @param {!CacheEntry} blocked\n * @param {string} blocker\n */\nfunction addAsBlocking(blocked, blocker) {\n  if (blocked.module.id != blocker) {\n    var blockedModules = blockingModulePathToBlockedModules.get(blocker);\n\n    if (!blockedModules) {\n      blockedModules = new Set();\n      blockingModulePathToBlockedModules.set(blocker, blockedModules);\n    }\n\n    blockedModules.add(blocked);\n    blocked.blockingDeps.add(blocker);\n  }\n}\n\n\n/**\n * Marks the given module as no longer blocking any modules. Instead marks the\n * module's blockers as blocking these modules. If this totally unblocks a\n * module it is marked as available.\n *\n * @param {!CacheEntry} cacheEntry\n */\nfunction removeAsBlocking(cacheEntry) {\n  var blocked = blockingModulePathToBlockedModules.get(cacheEntry.module.id);\n\n  if (blocked) {\n    blockingModulePathToBlockedModules.delete(cacheEntry.module.id);\n\n    blocked.forEach(function(blockedCacheEntry) {\n      blockedCacheEntry.blockingDeps.delete(cacheEntry.module.id);\n\n      cacheEntry.blockingDeps.forEach(function(blocker) {\n        addAsBlocking(blockedCacheEntry, blocker);\n      });\n\n      if (!blockedCacheEntry.blockingDeps.size) {\n        removeAsBlocking(blockedCacheEntry);\n        markAvailable(blockedCacheEntry.module.id);\n      }\n    });\n  }\n}\n\n\n/**\n * Forces module evaluation as soon as it is available for require.\n *\n * @param {function(function(string), ?, !Module)} moduleDef\n * @param {string} absModulePath\n * @param {!Array<string>} shallowDeps\n * @suppress {strictMissingProperties} \"ensure\" is not declared.\n */\n$jscomp.registerAndLoadModule = function(\n    moduleDef, absModulePath, shallowDeps) {\n  $jscomp.require.ensure([absModulePath], function(require) {\n    require(absModulePath);\n  });\n  $jscomp.registerModule(moduleDef, absModulePath, shallowDeps);\n};\n\n\n/**\n * Registers an object as if it is the exports of an ES6 module so that it may\n * be retrieved via $jscomp.require.\n *\n * Used by Closure Library in the event that only some ES6 modules need\n * transpilation.\n *\n * @param {string} absModulePath\n * @param {?} exports\n */\n$jscomp.registerEs6ModuleExports = function(absModulePath, exports) {\n  if (moduleCache.has(absModulePath)) {\n    throw new Error(\n        'Module at path ' + absModulePath + ' is already registered.');\n  }\n\n  var entry =\n      new CacheEntry(null, new Module(absModulePath, exports), absModulePath);\n  moduleCache.set(absModulePath, entry);\n  markAvailable(absModulePath);\n};\n\n\n/**\n * Hook to clear all loaded modules. Meant to only be used by tests.\n */\n$jscomp.clearModules = function() {\n  moduleCache.clear();\n};\n})();\n","js/es6/nopolyfill.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview Specifies objects that the compiler does NOT polyfill.\n * NOTE: this file should never be injected, since all the implementations\n * are null.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Proxy', null, 'es6', 'es6');\n\n$jscomp.polyfill('String.raw', null, 'es6', 'es6');\n$jscomp.polyfill('String.prototype.normalize', null, 'es6', 'es6');\n","js/es6/number.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 Number polyfills.\n */\n'require es6/number/constants';\n'require es6/number/isfinite';\n'require es6/number/isinteger';\n'require es6/number/isnan';\n'require es6/number/issafeinteger';\n'require es6/number/parsefloat';\n'require es6/number/parseint';\n","js/es6/number/constants.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n\n$jscomp.polyfill('Number.EPSILON', function(orig) {\n  /**\n   * The difference 1 and the smallest number greater than 1.\n   *\n   * <p>Polyfills the static field Number.EPSILON.\n   */\n  return Math.pow(2, -52);\n}, 'es6', 'es3');\n\n\n$jscomp.polyfill('Number.MAX_SAFE_INTEGER', function() {\n  /**\n   * The maximum safe integer, 2^53 - 1.\n   *\n   * <p>Polyfills the static field Number.MAX_SAFE_INTEGER.\n   */\n  return 0x1fffffffffffff;\n}, 'es6', 'es3');\n\n\n$jscomp.polyfill('Number.MIN_SAFE_INTEGER', function() {\n  /**\n   * The minimum safe integer, -(2^53 - 1).\n   *\n   * <p>Polyfills the static field Number.MIN_SAFE_INTEGER.\n   */\n  return -0x1fffffffffffff;\n}, 'es6', 'es3');\n","js/es6/number/isfinite.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Number.isFinite', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns whether the given argument is a finite number.\n   *\n   * <p>Polyfills the static function Number.isFinite().\n   *\n   * @param {number} x Any value.\n   * @return {boolean} True if x is a number and not NaN or infinite.\n   */\n  var polyfill = function(x) {\n    if (typeof x !== 'number') return false;\n    return !isNaN(x) && x !== Infinity && x !== -Infinity;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/number/isinteger.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/number/isfinite';\n'require util/polyfill';\n\n$jscomp.polyfill('Number.isInteger', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns whether the given argument is an integer.\n   *\n   * <p>Polyfills the static function Number.isInteger().\n   *\n   * @param {number} x Any value.\n   * @return {boolean} True if x is an integer.\n   */\n  var polyfill = function(x) {\n    if (!Number.isFinite(x)) return false;\n    return x === Math.floor(x);\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/number/isnan.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Number.isNaN', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns whether the given argument is the value NaN,\n   * guaranteeing not to coerce to a number first.\n   *\n   * <p>Polyfills the static function Number.isNaN().\n   *\n   * @param {number} x Any value.\n   * @return {boolean} True if x is exactly NaN.\n   */\n  var polyfill = function(x) {\n    return typeof x === 'number' && isNaN(x);\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/number/issafeinteger.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/number/constants';\n'require es6/number/isinteger';\n'require util/polyfill';\n\n$jscomp.polyfill('Number.isSafeInteger', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns whether the given argument is a \"safe\" integer,\n   * that is, its magnitude is less than 2^53.\n   *\n   * <p>Polyfills the static function Number.isSafeInteger().\n   *\n   * @param {number} x Any value.\n   * @return {boolean} True if x is a safe integer.\n   */\n  var polyfill = function(x) {\n    return Number.isInteger(x) && Math.abs(x) <= Number.MAX_SAFE_INTEGER;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/number/parsefloat.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Number.parseFloat', function(orig) {\n  return orig || parseFloat;\n}, 'es6', 'es3');\n","js/es6/number/parseint.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Number.parseInt', function(orig) {\n  return orig || parseInt;\n}, 'es6', 'es3');\n","js/es6/object.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 Object polyfills.\n * @suppress {uselessCode}\n */\n'require es6/object/assign';\n'require es6/object/entries';\n'require es6/object/fromentries';\n'require es6/object/getownpropertydescriptors';\n'require es6/object/getownpropertysymbols';\n'require es6/object/is';\n'require es6/object/setprototypeof';\n'require es6/object/values';\n","js/es6/object/assign.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require es6/util/assign';\n'require util/polyfill';\n\n$jscomp.polyfill('Object.assign', function(orig) {\n  return orig || $jscomp.assign;\n}, 'es6', 'es3');\n","js/es6/object/entries.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('Object.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an array of [key, value] arrays, one for each entry\n   * in the given object.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n   *\n   * @param {!Object<KEY, VALUE>} obj\n   * @return {!Array<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   */\n  var entries = function(obj) {\n    var result = [];\n    for (var key in obj) {\n      if ($jscomp.owns(obj, key)) {\n        result.push([key, obj[key]]);\n      }\n    }\n    return result;\n  };\n\n  return entries;\n}, 'es8', 'es3');\n","js/es6/object/fromentries.js":"/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require es6/symbol';\n'require util/defineproperty';\n'require util/polyfill';\n\n$jscomp.polyfill('Object.fromEntries', function(orig) {\n  if (orig) {\n    return orig;\n  }\n\n  /**\n   * @param {!Iterable<*>} iter\n   * @return {!Object}\n   * @see https://github.com/tc39/proposal-object-from-entries/blob/master/polyfill.js\n   */\n  function fromEntries(iter) {\n    var obj = {};\n\n    if (!(Symbol.iterator in iter)) {\n      throw new TypeError('' + iter + ' is not iterable');\n    }\n\n    var iteratorFn = (/** @type {function(): !Iterator<!Object<number, *>>} */ (\n        iter[Symbol.iterator]));\n    var iterator = iteratorFn.call(iter);\n\n    for (var result = iterator.next(); !result.done; result = iterator.next()) {\n      var pair = result.value;\n\n      if (Object(pair) !== pair) {\n        throw new TypeError('iterable for fromEntries should yield objects');\n      }\n\n      var key = pair[0];\n      var val = pair[1];\n      obj[key] = val;\n    }\n\n    return obj;\n  }\n\n  return fromEntries;\n}, 'es_2019', 'es3');\n","js/es6/object/getownpropertydescriptors.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/reflect/ownkeys';\n'require util/polyfill';\n\n$jscomp.polyfill('Object.getOwnPropertyDescriptors', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills Object.getOwnPropertyDescriptors.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries\n   *\n   * @param {!Object} obj\n   * @return {!Object<!ObjectPropertyDescriptor>}\n   */\n  var getOwnPropertyDescriptors = function(obj) {\n    var result = {};\n    var keys = Reflect.ownKeys(obj);\n    for (var i = 0; i < keys.length; i++) {\n      result[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return result;\n  };\n\n  return getOwnPropertyDescriptors;\n}, 'es8', 'es5');\n","js/es6/object/getownpropertysymbols.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Object.getOwnPropertySymbols', function(orig) {\n  if (orig) return orig;\n\n  // NOTE: The symbol polyfill is a string, so symbols show up in\n  // Object.getOwnProperytyNames instead.  It's been decided that\n  // the trade-off of \"fixing\" this behavior is not worth the costs\n  // in (a) code size, (b) brittleness, and (c) complexity.\n  return function() { return []; };\n}, 'es6', 'es5'); // Same as Object.getOwnPropertyNames\n","js/es6/object/is.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Object.is', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Object.is() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n   *\n   * Determines whether two values are the same value (that is,\n   * functionally equivalent).  This is the same as ===-equality,\n   * except for two cases: 0 is not the same as -0, and NaN is\n   * the same as NaN.\n   *\n   * @param {*} left\n   * @param {*} right\n   * @return {boolean}\n   */\n  var polyfill = function(left, right) {\n    if (left === right) {\n      // Handle the 0 === -0 exception\n      return (left !== 0) || (1 / left === 1 / /** @type {number} */ (right));\n    } else {\n      // Handle the NaN !== NaN exception\n      return (left !== left) && (right !== right);\n    }\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/object/setprototypeof.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill('Object.setPrototypeOf', function(orig) {\n  // Note that $jscomp.setPrototypeOf will be `null` if it isn't possible to\n  // implement this method.\n  return orig || $jscomp.setPrototypeOf;\n}, 'es6', 'es5');\n","js/es6/object/values.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('Object.values', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an array of values from the given object.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/values\n   *\n   * @param {!Object<KEY, VALUE>} obj\n   * @return {!Array<VALUE>}\n   * @template KEY, VALUE\n   */\n  var values = function(obj) {\n    var result = [];\n    for (var key in obj) {\n      if ($jscomp.owns(obj, key)) {\n        result.push(obj[key]);\n      }\n    }\n    return result;\n  };\n\n  return values;\n}, 'es8', 'es3');\n","js/es6/promise.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all Promise polyfills.\n * @suppress {uselessCode}\n */\n'require es6/promise/promise';\n'require es6/promise/allSettled';\n'require es6/promise/finally';\n","js/es6/promise/allSettled.js":"/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/promise/promise';\n'require es6/array/from';\n\n$jscomp.polyfill('Promise.allSettled', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * @param {*} value\n   * @return {{status: string, value: *}}\n   */\n  function fulfilledResult(value) {\n    return {status: 'fulfilled', value: value};\n  }\n\n  /**\n   * @param {*} reason\n   * @return {{status: string, reason: *}}\n   */\n  function rejectedResult(reason) {\n    return {status: 'rejected', reason: reason};\n  }\n\n  /**\n   * These types are weaker than they could be, but they're strong enough for\n   * this context.\n   * @this {typeof Promise}\n   * @param {!Iterable<*>} thenablesOrValues\n   * @return {!Promise<!Array<*>>}\n   */\n  var polyfill = function(thenablesOrValues) {\n    // The spec requires allSettled to be called directly on the Promise\n    // constructor, which is consistent with its requirement for Promise.all().\n    /** @type {typeof Promise} */\n    var PromiseConstructor = this;\n\n    /**\n     * @param {*} maybeThenable\n     * @return {!Promise<*>}\n     */\n    function convertToAllSettledResult(maybeThenable) {\n      return PromiseConstructor.resolve(maybeThenable)\n          .then(fulfilledResult, rejectedResult);\n    }\n\n    // Create an array of promises that resolve to the appropriate result\n    // objects and never reject.\n    var wrappedResults =\n        Array.from(thenablesOrValues, convertToAllSettledResult);\n    return PromiseConstructor.all(wrappedResults);\n  };\n  return polyfill;\n}, 'es_2020', 'es3');\n","js/es6/promise/finally.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/promise/promise';\n\n$jscomp.polyfill('Promise.prototype.finally', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * @this {!Promise<VALUE>}\n   * @param {function():?} onFinally\n   * @return {!Promise<VALUE>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(onFinally) {\n    return this.then(\n        function(value) {\n          var promise = Promise.resolve(onFinally());\n          return promise.then(function () { return value; });\n        },\n        function(reason) {\n          var promise = Promise.resolve(onFinally());\n          return promise.then(function () { throw reason; });\n        });\n  };\n\n  return polyfill;\n}, 'es9', 'es3');\n","js/es6/promise/promise.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n'require es6/util/makeiterator';\n'require util/defines';\n'require util/global';\n'require util/polyfill';\n\n\n$jscomp.polyfill('Promise',\n    /**\n     * @param {*} NativePromise\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativePromise) {\n  function platformSupportsPromiseRejectionEvents() {\n    return typeof $jscomp.global['PromiseRejectionEvent'] !== 'undefined';\n  }\n\n  function globalPromiseIsNative() {\n    return $jscomp.global['Promise'] &&\n        $jscomp.global['Promise'].toString().indexOf('[native code]') !== -1;\n  }\n\n  function shouldForcePolyfillPromise() {\n    // Only force polyfill if the global promise is native.\n    return ($jscomp.FORCE_POLYFILL_PROMISE ||\n      $jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION &&\n      !platformSupportsPromiseRejectionEvents()) && globalPromiseIsNative();\n  }\n\n  // TODO(bradfordcsmith): Do we need to add checks for standards conformance?\n  //     e.g. The version of FireFox we currently use for testing has a Promise\n  //     that fails to reject attempts to fulfill it with itself, but that\n  //     isn't reasonably testable here.\n  if (NativePromise && !shouldForcePolyfillPromise()) {\n    return NativePromise;\n  }\n\n  /**\n    * Schedules code to be executed asynchronously.\n    * @constructor\n    * @struct\n    */\n  function AsyncExecutor() {\n    /**\n     * Batch of functions to execute.\n     *\n     * Will be `null` initially and immediately after a batch finishes\n     * executing.\n     * @private {?Array<function()>}\n     */\n    this.batch_ = null;\n  }\n\n  /**\n   * Schedule a function to execute asynchronously.\n   *\n   * -   The function will execute:\n   *     -   After the current call stack has completed executing.\n   *     -   After any functions previously scheduled using this object.\n   * -   The return value will be ignored.\n   * -   An exception thrown by the method will be caught and asynchronously\n   *     rethrown when it cannot interrupt any other code. This class provides\n   *     no way to catch such exceptions.\n   * @param {function():?} f\n   */\n  AsyncExecutor.prototype.asyncExecute = function(f) {\n    if (this.batch_ == null) {\n      // no batch created yet, or last batch was fully executed\n      this.batch_ = [];\n      var self = this;\n      this.asyncExecuteFunction(function() { self.executeBatch_(); });\n    }\n    this.batch_.push(f);\n  };\n\n  // NOTE: We want to make sure AsyncExecutor will work as expected even if\n  // testing code should override setTimeout()\n  /** @const {function(!Function, number)} */\n  var nativeSetTimeout = $jscomp.global['setTimeout'];\n\n  /**\n   * Schedule a function to execute asynchronously as soon as possible.\n   *\n   * NOTE: May be overridden for testing.\n   * @package\n   * @param {function()} f\n   */\n  AsyncExecutor.prototype.asyncExecuteFunction = function(f) {\n    nativeSetTimeout(f, 0);\n  };\n\n  /**\n   * Execute scheduled jobs in a batch until all are executed or the batch\n   * execution time limit has been reached.\n   * @private\n   */\n  AsyncExecutor.prototype.executeBatch_ = function() {\n    while (this.batch_ && this.batch_.length) {\n      var /** !Array<?function()> */ executingBatch = this.batch_;\n      // Executions scheduled while executing this batch go into a new one to\n      // avoid the batch array getting too big.\n      this.batch_ = [];\n      for (var i = 0; i < executingBatch.length; ++i) {\n        var f = /** @type {function()} */ (executingBatch[i]);\n        executingBatch[i] = null;  // free memory\n        try {\n          f();\n        } catch (error) {\n          this.asyncThrow_(error);\n        }\n      }\n    }\n    // All jobs finished executing, so force scheduling a new batch next\n    // time asyncExecute() is called.\n    this.batch_ = null;\n  };\n\n  /**\n   * @private\n   * @param {*} exception\n   */\n  AsyncExecutor.prototype.asyncThrow_ = function(exception) {\n    this.asyncExecuteFunction(function() { throw exception; });\n  };\n\n  /**\n   * @enum {number}\n   */\n  var PromiseState = {\n    /** The Promise is waiting for resolution. */\n    PENDING: 0,\n\n    /** The Promise has been resolved with a fulfillment value. */\n    FULFILLED: 1,\n\n    /** The Promise has been resolved with a rejection reason. */\n    REJECTED: 2\n  };\n\n\n  /**\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\n   * @param {function(\n   *             function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *             function(*=))} executor\n   * @constructor\n   * @extends {Promise<TYPE>}\n   * @template TYPE\n   */\n  var PolyfillPromise = function(executor) {\n    /** @private {PromiseState} */\n    this.state_ = PromiseState.PENDING;\n\n    /**\n     * The settled result of the Promise. Immutable once set with either a\n     * fulfillment value or rejection reason.\n     * @private {*}\n     */\n    this.result_ = undefined;\n\n    /**\n     * These functions must be asynchronously executed when this promise\n     * settles.\n     * @private {?Array<function()>}\n     */\n    this.onSettledCallbacks_ = [];\n\n    /**\n     * Whether the rejection has any handler when the promise is rejected.\n     * @private {boolean}\n     */\n    this.isRejectionHandled_ = false;\n\n    var resolveAndReject = this.createResolveAndReject_();\n    try {\n      executor(resolveAndReject.resolve, resolveAndReject.reject);\n    } catch (e) {\n      resolveAndReject.reject(e);\n    }\n  };\n\n\n  /**\n   * Create a pair of functions for resolving or rejecting this Promise.\n   *\n   * <p>After the resolve or reject function has been called once, later calls\n   * do nothing.\n   * @private\n   * @return {{\n   *     resolve: function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *     reject:  function(*=)\n   * }}\n   */\n  PolyfillPromise.prototype.createResolveAndReject_ = function() {\n    var thisPromise = this;\n    var alreadyCalled = false;\n    /**\n     * @param {function(this:PolyfillPromise<TYPE>, T=)} method\n     * @return {function(T=)}\n     * @template T\n     */\n    function firstCallWins(method) {\n      return function(/** T= */ x) {\n        if (!alreadyCalled) {\n          alreadyCalled = true;\n          method.call(thisPromise, x);\n        }\n      };\n    }\n    return {\n      resolve: firstCallWins(this.resolveTo_),\n      reject: firstCallWins(this.reject_)\n    };\n  };\n\n\n  /**\n   * @private\n   * @param {*=} value\n   */\n  PolyfillPromise.prototype.resolveTo_ = function(value) {\n    if (value === this) {\n      this.reject_(new TypeError('A Promise cannot resolve to itself'));\n    } else if (value instanceof PolyfillPromise) {\n      this.settleSameAsPromise_(/** @type {!PolyfillPromise} */ (value));\n    } else if (isObject(value)) {\n      this.resolveToNonPromiseObj_(/** @type {!Object} */ (value));\n    } else {\n      this.fulfill_(value);\n    }\n  };\n\n\n  /**\n   * @private\n   * @param {!Object} obj\n   * @suppress {strictMissingProperties} obj.then\n   */\n  PolyfillPromise.prototype.resolveToNonPromiseObj_ = function(obj) {\n    var thenMethod = undefined;\n\n    try {\n      thenMethod = obj.then;\n    } catch (error) {\n      this.reject_(error);\n      return;\n    }\n    if (typeof thenMethod == 'function') {\n      this.settleSameAsThenable_(thenMethod, /** @type {!Thenable} */ (obj));\n    } else {\n      this.fulfill_(obj);\n    }\n  };\n\n\n  /**\n   * @param {*} value anything\n   * @return {boolean}\n   */\n  function isObject(value) {\n    switch (typeof value) {\n      case 'object':\n        return value != null;\n      case 'function':\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * Reject this promise for the given reason.\n   * @private\n   * @param {*=} reason\n   * @throws {!Error} if this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.reject_ = function(reason) {\n    this.settle_(PromiseState.REJECTED, reason);\n  };\n\n  /**\n   * Fulfill this promise with the given value.\n   * @private\n   * @param {!TYPE} value\n   * @throws {!Error} when this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.fulfill_ = function(value) {\n    this.settle_(PromiseState.FULFILLED, value);\n  };\n\n  /**\n   * Fulfill or reject this promise with the given value/reason.\n   * @private\n   * @param {!PromiseState} settledState (FULFILLED or REJECTED)\n   * @param {*} valueOrReason\n   * @throws {!Error} when this promise is already fulfilled or rejected.\n   */\n  PolyfillPromise.prototype.settle_ = function(settledState, valueOrReason) {\n    if (this.state_ != PromiseState.PENDING) {\n      throw new Error(\n          'Cannot settle(' + settledState + ', ' + valueOrReason +\n          '): Promise already settled in state' + this.state_);\n    }\n    this.state_ = settledState;\n    this.result_ = valueOrReason;\n    if (this.state_ === PromiseState.REJECTED) {\n      this.scheduleUnhandledRejectionCheck_();\n    }\n    this.executeOnSettledCallbacks_();\n  };\n\n  PolyfillPromise.prototype.scheduleUnhandledRejectionCheck_ = function() {\n    var self = this;\n    nativeSetTimeout(function() {\n      if (self.notifyUnhandledRejection_()) {\n        // console may not exist on IE 9.\n        var nativeConsole = $jscomp.global['console'];\n        if (typeof nativeConsole !== 'undefined') {\n          nativeConsole.error(self.result_);\n        }\n      }\n    }, 1);\n  };\n\n  /**\n   * Dispatches `unhandledrejection` event if the rejection is unhandled.\n   * @return {boolean} False means the fallback handler does not need to run. It\n   *     is either because rejection handlers are detected or one of the\n   *     `unhandledjrection` event handlers call `preventDefault()`.\n   *     True otherwise.\n   * @private\n   */\n  PolyfillPromise.prototype.notifyUnhandledRejection_ = function() {\n    if (this.isRejectionHandled_) {\n      return false;\n    }\n    var NativeCustomEvent = $jscomp.global['CustomEvent'];\n    var NativeEvent = $jscomp.global['Event'];\n    var nativeDispatchEvent = $jscomp.global['dispatchEvent'];\n    if (typeof nativeDispatchEvent === 'undefined') {\n      return true;\n    }\n\n    var event;\n    if (typeof NativeCustomEvent === 'function') {\n      event =\n          new NativeCustomEvent('unhandledrejection', {cancelable: true});\n    } else if (typeof NativeEvent === 'function') {\n      // CustomEvent is not available in FireFox < 48 in workers.\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n      event = new NativeEvent('unhandledrejection', {cancelable: true});\n    } else {\n      // IE does not support CustomEvent constructor.\n      event = $jscomp.global['document'].createEvent('CustomEvent');\n      event.initCustomEvent(\n          'unhandledrejection', /** canBubbleArg */ false,\n          /** cancelableArg */ true, event);\n    }\n    event.promise = this;\n    event.reason = this.result_;\n\n    return nativeDispatchEvent(event);\n  };\n\n  PolyfillPromise.prototype.executeOnSettledCallbacks_ = function() {\n    if (this.onSettledCallbacks_ != null) {\n      for (var i = 0; i < this.onSettledCallbacks_.length; ++i) {\n        asyncExecutor.asyncExecute(this.onSettledCallbacks_[i]);\n      }\n      this.onSettledCallbacks_ = null;  // free memory\n    }\n  };\n\n  /**\n   * All promise async execution is managed by a single executor for the\n   * sake of efficiency.\n   * @const {!AsyncExecutor}\n   */\n  var asyncExecutor = new AsyncExecutor();\n\n  /**\n   * Arrange to settle this promise in the same way as the given thenable.\n   * @private\n   * @param {!PolyfillPromise} promise\n   */\n  PolyfillPromise.prototype.settleSameAsPromise_ = function(promise) {\n    var methods = this.createResolveAndReject_();\n\n    // Calling then() would create an unnecessary extra promise.\n    promise.callWhenSettled_(methods.resolve, methods.reject);\n  };\n\n  /**\n   * Arrange to settle this promise in the same way as the given thenable.\n   * @private\n   * @param {function(\n   *     function((TYPE|IThenable<TYPE>|Thenable|null)=),\n   *     function(*=))\n   * } thenMethod\n   * @param {!Thenable} thenable\n   */\n  PolyfillPromise.prototype.settleSameAsThenable_ = function(\n      thenMethod, thenable) {\n    var methods = this.createResolveAndReject_();\n\n    // Don't trust an unknown thenable implementation not to throw exceptions.\n    try {\n      thenMethod.call(thenable, methods.resolve, methods.reject);\n    } catch (error) {\n      methods.reject(error);\n    }\n  };\n\n  /** @override */\n  PolyfillPromise.prototype.then = function(onFulfilled, onRejected) {\n    var resolveChild;\n    var rejectChild;\n    var childPromise = new PolyfillPromise(function(resolve, reject) {\n      resolveChild = resolve;\n      rejectChild = reject;\n    });\n    function createCallback(paramF, defaultF) {\n      // The spec says to ignore non-function values for onFulfilled and\n      // onRejected\n      if (typeof paramF == 'function') {\n        return function(x) {\n          try {\n            resolveChild(paramF(x));\n          } catch (error) {\n            rejectChild(error);\n          }\n        };\n      } else {\n        return defaultF;\n      }\n    }\n\n    this.callWhenSettled_(\n        createCallback(onFulfilled, resolveChild),\n        createCallback(onRejected, rejectChild));\n    return childPromise;\n  };\n\n  /** @override */\n  PolyfillPromise.prototype.catch = function(onRejected) {\n    return this.then(undefined, onRejected);\n  };\n\n\n  PolyfillPromise.prototype.callWhenSettled_ = function(\n      onFulfilled, onRejected) {\n    var /** !PolyfillPromise */ thisPromise = this;\n    function callback() {\n      switch (thisPromise.state_) {\n        case PromiseState.FULFILLED:\n          onFulfilled(thisPromise.result_);\n          break;\n        case PromiseState.REJECTED:\n          onRejected(thisPromise.result_);\n          break;\n        default:\n          throw new Error('Unexpected state: ' + thisPromise.state_);\n      }\n    }\n    if (this.onSettledCallbacks_ == null) {\n      // we've already settled\n      asyncExecutor.asyncExecute(callback);\n    } else {\n      this.onSettledCallbacks_.push(callback);\n    }\n    this.isRejectionHandled_ = true;\n  };\n\n  // called locally, so give it a name\n  function resolvingPromise(opt_value) {\n    if (opt_value instanceof PolyfillPromise) {\n      return opt_value;\n    } else {\n      return new PolyfillPromise(function(resolve, reject) {\n        resolve(opt_value);\n      });\n    }\n  }\n  PolyfillPromise['resolve'] = resolvingPromise;\n\n\n  PolyfillPromise['reject'] = function(opt_reason) {\n    return new PolyfillPromise(function(resolve, reject) {\n      reject(opt_reason);\n    });\n  };\n\n\n  PolyfillPromise['race'] = function(thenablesOrValues) {\n    return new PolyfillPromise(function(resolve, reject) {\n      var /** !Iterator<*> */ iterator =\n          $jscomp.makeIterator(thenablesOrValues);\n      for (var /** !IIterableResult<*> */ iterRec = iterator.next();\n           !iterRec.done;\n           iterRec = iterator.next()) {\n        // Using resolvingPromise() allows us to treat all elements the same\n        // way.\n        // NOTE: resolvingPromise(promise) always returns the argument\n        // unchanged.\n        // Using .callWhenSettled_() instead of .then() avoids creating an\n        // unnecessary extra promise.\n        resolvingPromise(iterRec.value).callWhenSettled_(resolve, reject);\n      }\n    });\n  };\n\n\n  PolyfillPromise['all'] = function(thenablesOrValues) {\n    var /** !Iterator<*> */ iterator = $jscomp.makeIterator(thenablesOrValues);\n    var /** !IIterableResult<*> */ iterRec = iterator.next();\n\n    if (iterRec.done) {\n      return resolvingPromise([]);\n    } else {\n      return new PolyfillPromise(function(resolveAll, rejectAll) {\n        var resultsArray = [];\n        var unresolvedCount = 0;\n\n        function onFulfilled(i) {\n          return function(ithResult) {\n            resultsArray[i] = ithResult;\n            unresolvedCount--;\n            if (unresolvedCount == 0) {\n              resolveAll(resultsArray);\n            }\n          };\n        }\n\n        do {\n          resultsArray.push(undefined);\n          unresolvedCount++;\n          // Using resolvingPromise() allows us to treat all elements the same\n          // way.\n          // NOTE: resolvingPromise(promise) always returns the argument\n          // unchanged. Using .callWhenSettled_() instead of .then() avoids\n          // creating an unnecessary extra promise.\n          resolvingPromise(iterRec.value)\n              .callWhenSettled_(\n                  onFulfilled(resultsArray.length - 1), rejectAll);\n          iterRec = iterator.next();\n        } while (!iterRec.done);\n      });\n    }\n  };\n\n  return PolyfillPromise;\n}, 'es6', 'es3');\n","js/es6/reflect.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Rolls together all ES6 Reflect polyfills.\n */\n'require es6/reflect/apply';\n'require es6/reflect/construct';\n'require es6/reflect/defineproperty';\n'require es6/reflect/deleteproperty';\n'require es6/reflect/get';\n'require es6/reflect/getownpropertydescriptor';\n'require es6/reflect/getprototypeof';\n'require es6/reflect/has';\n'require es6/reflect/isextensible';\n'require es6/reflect/ownkeys';\n'require es6/reflect/preventextensions';\n'require es6/reflect/set';\n'require es6/reflect/setprototypeof';\n","js/es6/reflect/apply.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.apply', function(orig) {\n  if (orig) return orig;\n  var apply = Function.prototype.apply;\n\n  /**\n   * Polyfill for Reflect.apply() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/apply\n   *\n   * Calls a target function with arguments as specified, just\n   * as Function.prototype.apply.\n   *\n   * @param {function(this: THIS, ...*): RESULT} target The function to call.\n   * @param {THIS} thisArg The 'this' argument.\n   * @param {!Array} argList The arguments as a list.\n   * @return {RESULT} The result of the function call.\n   * @template THIS, RESULT\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(target, thisArg, argList) {\n    return apply.call(target, thisArg, argList);\n  };\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/reflect/construct.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","js/es6/reflect/defineproperty.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.defineProperty', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Reflect.defineProperty() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty\n   *\n   * Version of Object.defineProperty that returns a boolean.\n   *\n   * @param {!Object} target Target on which to define the property.\n   * @param {string} propertyKey Name of the property to define.\n   * @param {!ObjectPropertyDescriptor} attributes Property attributes.\n   * @return {boolean} Whether the property was defined.\n   */\n  var polyfill = function(target, propertyKey, attributes) {\n    try {\n      Object.defineProperty(target, propertyKey, attributes);\n      var desc = Object.getOwnPropertyDescriptor(target, propertyKey);\n      if (!desc) return false;\n      return desc.configurable === (attributes.configurable || false) &&\n          desc.enumerable === (attributes.enumerable || false) &&\n          ('value' in desc ?\n              desc.value === attributes.value &&\n                  desc.writable === (attributes.writable || false) :\n              desc.get === attributes.get &&\n                  desc.set === attributes.set);\n    } catch (err) {\n      return false;\n    }\n  };\n  return polyfill;\n}, 'es6', 'es5'); // ES5: Requires Object.defineProperty\n","js/es6/reflect/deleteproperty.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/owns';\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.deleteProperty', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Reflect.deleteProperty() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/deleteProperty\n   *\n   * Applies the 'delete' operator as a function.\n   *\n   * @param {!Object} target Target on which to delete the property.\n   * @param {string} propertyKey Name of the property to delete.\n   * @return {boolean} Whether the property was deleted.\n   */\n  var polyfill = function(target, propertyKey) {\n    if (!$jscomp.owns(target, propertyKey)) {\n      return true;\n    }\n    try {\n      return delete target[propertyKey];\n    } catch (err) {\n      return false;\n    }\n  };\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/reflect/get.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/finddescriptor';\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.get', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Reflect.get() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/get\n   *\n   * Applies the 'getprop' operator as a function.\n   *\n   * @param {!Object} target Target on which to get the property.\n   * @param {string} propertyKey Name of the property to get.\n   * @param {!Object=} opt_receiver An optional 'this' to use for a getter.\n   * @return {*} The value of the property.\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function(target, propertyKey, opt_receiver) {\n    if (arguments.length <= 2) {\n      return target[propertyKey];\n    }\n    var property = $jscomp.findDescriptor(target, propertyKey);\n    if (property) {\n      return property.get ? property.get.call(opt_receiver) : property.value;\n    }\n    return undefined;\n  };\n  return polyfill;\n}, 'es6', 'es5'); // ES5: findDescriptor requires getPrototypeOf\n","js/es6/reflect/getownpropertydescriptor.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.getOwnPropertyDescriptor', function(orig) {\n  // NOTE: We don't make guarantees about correct throwing behavior.\n  // Non-object arguments should be prevented by the type checker.\n  return orig || Object.getOwnPropertyDescriptor;\n}, 'es6', 'es5'); // ES5: Requires Object.getOwnPropertyDescriptor\n","js/es6/reflect/getprototypeof.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.getPrototypeOf', function(orig) {\n  // NOTE: We don't make guarantees about correct throwing behavior.\n  // Non-object arguments should be prevented by the type checker.\n  return orig || Object.getPrototypeOf;\n}, 'es6', 'es5'); // ES5: Requires Object.getPrototypeOf\n","js/es6/reflect/has.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.has', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Reflect.has() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/has\n   *\n   * Applies the 'in' operator as a function.\n   *\n   * @param {!Object} target\n   * @param {*} propertyKey\n   * @return {boolean}\n   */\n  var polyfill = function(target, propertyKey) {\n    return propertyKey in target;\n  };\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/reflect/isextensible.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defines';\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.isExtensible', function(orig) {\n  if (orig) return orig;\n  if ($jscomp.ASSUME_ES5 || typeof Object.isExtensible == 'function') {\n    return Object.isExtensible;\n  }\n  return function() { return true; };\n}, 'es6', 'es3');\n","js/es6/reflect/ownkeys.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/reflect/reflect';\n'require es6/object/getownpropertysymbols';\n\n\n$jscomp.polyfill('Reflect.ownKeys',\n    /**\n     * @param {*} orig\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(orig) {\n  if (orig) return orig;\n\n  var symbolPrefix = 'jscomp_symbol_';\n  function isSymbol(key) {\n    return key.substring(0, symbolPrefix.length) == symbolPrefix;\n  }\n\n  /**\n   * Polyfill for Reflect.ownKeys() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/ownKeys\n   *\n   * Returns an array of the object's own property keys.\n   *\n   * @param {!Object} target\n   * @return {!Array<(string|symbol)>}\n   */\n  var polyfill = function(target) {\n    var keys = [];\n    var names = Object.getOwnPropertyNames(target);\n    var symbols = Object.getOwnPropertySymbols(target);\n    for (var i = 0; i < names.length; i++) {\n      (isSymbol(names[i]) ? symbols : keys).push(names[i]);\n    }\n    return keys.concat(symbols);\n  };\n  return polyfill;\n}, 'es6', 'es5'); // ES5: Requires Object.getOwnPropertyNames\n","js/es6/reflect/preventextensions.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defines';\n'require util/polyfill';\n'require es6/reflect/reflect';\n\n\n$jscomp.polyfill('Reflect.preventExtensions', function(orig) {\n  if (orig) return orig;\n\n  if (!($jscomp.ASSUME_ES5 || typeof Object.preventExtensions == 'function')) {\n    return function() { return false; };\n  }\n\n  /**\n   * Polyfill for Reflect.preventExtensions() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/preventExtensions\n   *\n   * Same function as Object.preventExtensions (the spec says\n   * to throw if the input is not an object, but jscompiler will\n   * fail to typecheck, so there's no reason to distinguish here).\n   *\n   * @param {!Object} target\n   * @return {boolean}\n   */\n  var polyfill = function(target) {\n    Object.preventExtensions(target);\n    return !Object.isExtensible(target);\n  };\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/reflect/reflect.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n// This must execute before any Reflect.* static method polyfills.\n$jscomp.polyfill('Reflect', function(orig) {\n  if (orig) return orig;\n  return {};\n}, 'es6', 'es3');\n","js/es6/reflect/set.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/reflect/isextensible';\n'require es6/reflect/reflect';\n'require util/finddescriptor';\n'require util/polyfill';\n\n\n$jscomp.polyfill('Reflect.set', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfill for Reflect.set() method:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/set\n   *\n   * Applies the 'setprop' operator as a function.\n   *\n   * @param {!Object} target Target on which to get the property.\n   * @param {string} propertyKey Name of the property to get.\n   * @param {*} value Value to set.\n   * @param {!Object=} opt_receiver An optional 'this' to use for a setter.\n   * @return {boolean} Whether setting was successful.\n   */\n  var polyfill = function(target, propertyKey, value, opt_receiver) {\n    var property = $jscomp.findDescriptor(target, propertyKey);\n    if (!property) {\n      if (Reflect.isExtensible(target)) {\n        target[propertyKey] = value;\n        return true;\n      }\n      return false;\n    }\n    if (property.set) {\n      property.set.call(arguments.length > 3 ? opt_receiver : target, value);\n      return true;\n    } else if (property.writable && !Object.isFrozen(target)) {\n      target[propertyKey] = value;\n      return true;\n    }\n    return false;\n  };\n  return polyfill;\n}, 'es6', 'es5'); // ES5: findDescriptor requires getPrototypeOf\n","js/es6/reflect/setprototypeof.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/reflect/reflect';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","js/es6/set.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/map';\n'require es6/symbol';\n'require util/defines';\n'require util/polyfill';\n\n$jscomp.polyfill('Set',\n    /**\n     * @param {*} NativeSet\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeSet) {\n\n  /**\n   * Checks conformance of the existing Set.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_SET ||\n        !NativeSet ||\n        typeof NativeSet != \"function\" ||\n        !NativeSet.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeSet = /** @type {function(new: Set, !Iterator=)} */ (NativeSet);\n      var value = Object.seal({x: 4});\n      var set = new NativeSet($jscomp.makeIterator([value]));\n      if (!set.has(value) || set.size != 1 || set.add(value) != set ||\n          set.size != 1 || set.add({x: 4}) != set || set.size != 2) {\n        return false;\n      }\n      var iter = set.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != value || item.value[1] != value) {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0] == value || item.value[0].x != 4 ||\n          item.value[1] != item.value[0]) {\n        return false;\n      }\n      return iter.next().done;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeSet && $jscomp.ES6_CONFORMANCE) return NativeSet;\n  } else {\n    if (isConformant()) return NativeSet;\n  }\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Set<VALUE>}\n   * @implements {Iterable<VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterable<VALUE>|!Array<VALUE>|null=} opt_iterable\n   *     Optional data to populate the set.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillSet = function(opt_iterable) {\n    /** @private @const {!Map<VALUE, VALUE>} */\n    this.map_ = new Map();\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = /** @type {!IIterableResult<VALUE>} */ (entry).value;\n        this.add(item);\n      }\n    }\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    this.size = this.map_.size;\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.add = function(value) {\n    // normalize -0/+0 to +0\n    value = value === 0 ? 0 : value;\n    this.map_.set(value, value);\n    this.size = this.map_.size;\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.delete = function(value) {\n    var result = this.map_.delete(value);\n    this.size = this.map_.size;\n    return result;\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.clear = function() {\n    this.map_.clear();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.has = function(value) {\n    return this.map_.has(value);\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.entries = function() {\n    return this.map_.entries();\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.values = function() {\n    return this.map_.values();\n  };\n\n\n  /** @override */\n  PolyfillSet.prototype.keys = PolyfillSet.prototype.values;\n\n\n  /** @type {?} */ (PolyfillSet.prototype)[Symbol.iterator] =\n      PolyfillSet.prototype.values;\n\n\n  /** @override */\n  PolyfillSet.prototype.forEach = function(callback, opt_thisArg) {\n    var set = this;\n    this.map_.forEach(function(value) {\n      return callback.call(/** @type {?} */ (opt_thisArg), value, value, set);\n    });\n  };\n\n\n  return PolyfillSet;\n}, 'es6', 'es3');\n","js/es6/string.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 String polyfills.\n * @suppress {uselessCode}\n */\n'require es6/string/codepointat';\n'require es6/string/endswith';\n'require es6/string/fromcodepoint';\n'require es6/string/includes';\n'require es6/string/matchall';\n'require es6/string/padend';\n'require es6/string/padstart';\n'require es6/string/repeat';\n'require es6/string/startswith';\n'require es6/string/trimend';\n'require es6/string/trimstart';\n","js/es6/string/codepointat.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.codePointAt', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns the UTF-16 codepoint at the given index.\n   *\n   * <p>Polyfills the instance method String.prototype.codePointAt().\n   *\n   * @this {string}\n   * @param {number} position\n   * @return {number|undefined} The codepoint.\n   */\n  var polyfill = function(position) {\n    // NOTE: this is taken from v8's harmony-string.js StringCodePointAt\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, null, 'codePointAt');\n    var size = string.length;\n    // Make 'position' a number (non-number coerced to NaN and then or to zero).\n    position = Number(position) || 0;\n    if (!(position >= 0 && position < size)) {\n      return void 0;\n    }\n    // Truncate 'position' to an integer.\n    position = position | 0;\n    var first = string.charCodeAt(position);\n    if (first < 0xD800 || first > 0xDBFF || position + 1 === size) {\n      return first;\n    }\n    var second = string.charCodeAt(position + 1);\n    if (second < 0xDC00 || second > 0xDFFF) {\n      return first;\n    }\n    return (first - 0xD800) * 0x400 + second + 0x2400;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/string/endswith.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","js/es6/string/fromcodepoint.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('String.fromCodePoint', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Creates a new string from the given codepoints.\n   *\n   * <p>Polyfills the static function String.fromCodePoint().\n   *\n   * @param {...number} var_args\n   * @return {string}\n   */\n  var polyfill = function(var_args) {\n    // Note: this is taken from v8's harmony-string.js StringFromCodePoint.\n    var result = '';\n    for (var i = 0; i < arguments.length; i++) {\n      var code = Number(arguments[i]);\n      if (code < 0 || code > 0x10FFFF || code !== Math.floor(code)) {\n        throw new RangeError('invalid_code_point ' + code);\n      }\n      if (code <= 0xFFFF) {\n        result += String.fromCharCode(code);\n      } else {\n        code -= 0x10000;\n        result += String.fromCharCode((code >>> 10) & 0x3FF | 0xD800);\n        result += String.fromCharCode(code & 0x3FF | 0xDC00);\n      }\n    }\n    return result;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/string/includes.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.includes', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Searches for a substring, starting at the given position.\n   *\n   * <p>Polyfills the instance method String.prototype.includes().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'includes');\n    return string.indexOf(searchString, opt_position || 0) !== -1;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/string/matchall.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require es6/symbol';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.matchAll', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of all results matching a string against a\n   * regular expression, including capturing groups.\n   *\n   * Polyfills the instance method String.prototype.matchAll().\n   *\n   * The spec calls for any non-RegExp object to be automatically converted,\n   * so we accept anything here, even though our externs only allow\n   * RegExp|string.\n   *\n   * @this {string}\n   * @param {*} regexp\n   * A regular expression object. If a non-RegExp object obj is passed,\n   * it is implicitly converted to a RegExp with a global tag by using\n   * new RegExp(obj).\n   * @return {!IteratorIterable<!RegExpResult>}\n   */\n  var polyfill = function(regexp) {\n    if (regexp instanceof RegExp && !regexp.global) {\n      throw new TypeError('RegExp passed into String.prototype.matchAll() must have global tag.');\n    }\n    var /** !RegExp */ regexCopy =\n        new RegExp(regexp, regexp instanceof RegExp ? undefined : 'g');\n    var matchString = this;\n    var /** boolean */ finished = false;\n    var matchAllIterator = {\n      next: function() {\n        if (finished) {\n          return {value: undefined, done: true};\n        }\n\n        var match = regexCopy.exec(matchString);\n        if (!match) {\n          finished = true;\n          return {value: undefined, done: true};\n        }\n        if (match[0] === '') {\n          /**\n           * See https://262.ecma-international.org/10.0/#sec-advancestringindex\n           * and\n           * https://github.com/ljharb/String.prototype.matchAll/blob/5e1a234e65d03e5312ea1d3cb617444f4ffa6e23/helpers/RegExpStringIterator.js#L71\n           *\n           * matchAll() is not allowed to get \"stuck\" returning an empty\n           * string match infinitely, so we must make sure lastIndex always\n           * increases.\n           *\n           * Also assume that `fullUnicode === false`. Any browser that supports\n           * unicode regexes should not need this polyfill.\n           */\n          regexCopy.lastIndex += 1;\n        }\n\n        return {value: match, done: false};\n      }\n    };\n    matchAllIterator[Symbol.iterator] = function() { return matchAllIterator; };\n    return /**@type {!IteratorIterable<!RegExpResult>}> */ (matchAllIterator);\n  };\n  return polyfill;\n}, 'es_2020', 'es3');\n","js/es6/string/padend.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/stringpadding';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.padEnd', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills String.prototype.padEnd.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\n   *\n   * @this {string}\n   * @param {number} targetLength\n   * @param {string=} opt_padString\n   * @return {string}\n   */\n  var padEnd = function(targetLength, opt_padString) {\n    var string = $jscomp.checkStringArgs(this, null, 'padStart');\n    var padLength = targetLength - string.length;\n    return string + $jscomp.stringPadding(opt_padString, padLength);\n  };\n\n  return padEnd;\n}, 'es8', 'es3');\n","js/es6/string/padstart.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n'require util/stringpadding';\n\n$jscomp.polyfill('String.prototype.padStart', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Polyfills String.prototype.padStart.\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\n   *\n   * @this {string}\n   * @param {number} targetLength\n   * @param {string=} opt_padString\n   * @return {string}\n   */\n  var padStart = function(targetLength, opt_padString) {\n    var string = $jscomp.checkStringArgs(this, null, 'padStart');\n    var padLength = targetLength - string.length;\n    return $jscomp.stringPadding(opt_padString, padLength) + string;\n  };\n\n  return padStart;\n}, 'es8', 'es3');\n","js/es6/string/repeat.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.repeat', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns a new string repeated the given number of times.\n   *\n   * <p>Polyfills the instance method String.prototype.repeat().\n   *\n   * @this {string}\n   * @param {number} copies\n   * @return {string}\n   */\n  var polyfill = function(copies) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, null, 'repeat');\n    if (copies < 0 || copies > 0x4FFFFFFF) { // impose a 1GB limit\n      throw new RangeError('Invalid count value');\n    }\n    copies = copies | 0; // cast to a signed integer.\n    var result = '';\n    while (copies) {\n      if (copies & 1) result += string;\n      if ((copies >>>= 1)) string += string;\n    }\n    return result;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/string/startswith.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.startsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string starts with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.startsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'startsWith');\n    searchString = searchString + '';\n    var strLen = string.length;\n    var searchLen = searchString.length;\n    var i = Math.max(\n        0,\n        Math.min(/** @type {number} */ (opt_position) | 0, string.length));\n    var j = 0;\n    while (j < searchLen && i < strLen) {\n      if (string[i++] != searchString[j++]) return false;\n    }\n    return j >= searchLen;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","js/es6/string/trimend.js":"/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n\n// Most browsers implemented trimRight around ES5-time-frame, but it wasn't\n// officially part of the language specification until ES_2019, so we have\n// to provide a polyfill for it.\n// IE11 doesn't have it, of course...\n$jscomp.polyfill('String.prototype.trimRight', function(orig) {\n  /**\n   * @this {string}\n   * @return {string}\n   */\n  function polyfill() {\n    return this.replace(/[\\s\\xa0]+$/, '');\n  }\n  return orig || polyfill;\n}, 'es_2019', 'es3');\n\n$jscomp.polyfill('String.prototype.trimEnd', function(orig) {\n  return orig || String.prototype.trimRight;\n}, 'es_2019', 'es3');\n","js/es6/string/trimstart.js":"/*\n * Copyright 2019 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n\n// Most browsers implemented trimLeft around ES5-time-frame, but it wasn't\n// officially part of the language specification until ES_2019, so we have\n// to provide a polyfill for it.\n// IE11 doesn't have it, of course...\n$jscomp.polyfill('String.prototype.trimLeft', function(orig) {\n  /**\n   * @this {string}\n   * @return {string}\n   */\n  function polyfill() {\n    return this.replace(/^[\\s\\xa0]+/, '');\n  }\n  return orig || polyfill;\n}, 'es_2019', 'es3');\n\n$jscomp.polyfill('String.prototype.trimStart', function(orig) {\n  return orig || String.prototype.trimLeft;\n}, 'es_2019', 'es3');\n","js/es6/symbol.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Symbol polyfill.\n * @suppress {uselessCode}\n */\n\n'require es6/util/arrayiterator';\n'require util/defineproperty';\n'require util/global';\n'require util/polyfill';\n\n/**\n * Initializes the Symbol function.\n * @noinline\n */\n// TODO(rishipal): Remove this function\n$jscomp.initSymbol = function() {};\n\n$jscomp.polyfill('Symbol', function(orig) {\n  if (orig) return orig;  // no polyfill needed\n\n  /**\n   * @struct @constructor\n   * @param {string} id\n   * @param {string=} opt_description\n   */\n  var SymbolClass = function(id, opt_description) {\n    /** @private @const {string} */\n    this.$jscomp$symbol$id_ = id;\n\n    /** @const {string|undefined} */\n    this.description;\n\n    // description is read-only.\n    $jscomp.defineProperty(\n        this, 'description',\n        {configurable: true, writable: true, value: opt_description});\n  };\n\n\n  /** @override */\n  SymbolClass.prototype.toString = function() {\n    return this.$jscomp$symbol$id_;\n  };\n\n\n  /** @const {string} */\n  var SYMBOL_PREFIX = 'jscomp_symbol_';\n\n  var counter = 0;\n\n  /**\n   * Produces \"symbols\" (actually just unique strings).\n   * @param {string=} opt_description\n   * @return {!SymbolClass}\n   * @this {?Object}\n   */\n  var symbolPolyfill = function(opt_description) {\n    if (this instanceof symbolPolyfill) {\n      throw new TypeError('Symbol is not a constructor');\n    }\n    return (new SymbolClass(\n        SYMBOL_PREFIX + (opt_description || '') + '_' + (counter++),\n        opt_description));\n  };\n\n  return symbolPolyfill;\n}, 'es6', 'es3');\n\n$jscomp.polyfill('Symbol.iterator', function(orig) {\n  if (orig) return orig;  // no polyfill needed\n\n  var symbolIterator = Symbol('Symbol.iterator');\n\n  // Polyfill 'Symbol.iterator' onto Array and the various TypedArray* objects.\n  // This array uses strings to index into $jscomp.global because the TypedArray\n  // objects are present in IE11 but not on older browsers. Using bracket access\n  // saves code size compared to `typeof Int8Array === 'function' && Int8Array`.\n  var /** !Array<string> */ arrayLikes = [\n    'Array',\n    // List taken from https://tc39.es/ecma262/#sec-typedarray-objects.\n    // The BigInt*Arrays are intentionally omitted because they are only present\n    // in browsers where Symbol is fully supported.\n    'Int8Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', 'Uint16Array',\n    'Int32Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n  ];\n\n  for (var i = 0; i < arrayLikes.length; i++) {\n    var ArrayLikeCtor = /** @type {*} */ ($jscomp.global[arrayLikes[i]]);\n    if (typeof ArrayLikeCtor === 'function' &&\n        typeof ArrayLikeCtor.prototype[symbolIterator] != 'function') {\n      $jscomp.defineProperty(ArrayLikeCtor.prototype, symbolIterator, {\n        configurable: true,\n        writable: true,\n        /**\n         * @this {IArrayLike}\n         * @return {!IteratorIterable}\n         */\n        value: function() {\n          return $jscomp.iteratorPrototype($jscomp.arrayIteratorImpl(this));\n        }\n      });\n    }\n  }\n  return symbolIterator;\n}, 'es6', 'es3');\n\n$jscomp.polyfill('Symbol.asyncIterator', function(orig) {\n  if (orig) {\n    return orig;\n  }\n  return Symbol('Symbol.asyncIterator');\n}, 'es9', 'es3');\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n */\n$jscomp.iteratorPrototype = function(next) {\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[Symbol.iterator] = function() {\n    return this;\n  };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","js/es6/typed_array.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Brings in all ES6 TypedArray polyfills.\n * @suppress {uselessCode}\n */\n'require es6/typedarray/copywithin';\n'require es6/typedarray/fill';\n","js/es6/typedarray/copywithin.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/array/copywithin';\n'require util/polyfill';\n\n/**\n * @param {*} orig\n * @return {*}\n */\n$jscomp.typedArrayCopyWithin = function(orig) {\n  if (orig) return orig;\n  return Array.prototype.copyWithin;\n};\n\n$jscomp.polyfill(\n    'Int8Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Uint8Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Uint8ClampedArray.prototype.copyWithin', $jscomp.typedArrayCopyWithin,\n    'es6', 'es5');\n$jscomp.polyfill(\n    'Int16Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Uint16Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Int32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Uint32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Float32Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n$jscomp.polyfill(\n    'Float64Array.prototype.copyWithin', $jscomp.typedArrayCopyWithin, 'es6',\n    'es5');\n","js/es6/typedarray/fill.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/array/fill';\n'require util/polyfill';\n\n/**\n * @param {*} orig\n * @return {*}\n */\n$jscomp.typedArrayFill = function(orig) {\n  if (orig) return orig;\n  return Array.prototype.fill;\n};\n\n$jscomp.polyfill(\n    'Int8Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Uint8Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Uint8ClampedArray.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Int16Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Uint16Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Int32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Uint32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Float32Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n$jscomp.polyfill(\n    'Float64Array.prototype.fill', $jscomp.typedArrayFill, 'es6', 'es5');\n","js/es6/util/arrayfromiterable.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require es6/util/makeiterator';\n'require es6/util/arrayfromiterator';\n\n\n/**\n * Copies the values from an Iterable into an Array.\n * @param {string|!Array<T>|!Iterable<T>|!Arguments} iterable\n * @return {!Array<T>}\n * @template T\n */\n$jscomp.arrayFromIterable = function(iterable) {\n  if (iterable instanceof Array) {\n    return iterable;\n  } else {\n    return $jscomp.arrayFromIterator($jscomp.makeIterator(iterable));\n  }\n};\n","js/es6/util/arrayfromiterator.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for array destructuring.\n */\n'require base';\n\n\n/**\n * Copies the values from an Iterator into an Array. The important difference\n * between this and $jscomp.arrayFromIterable is that if the iterator's\n * next() method has already been called one or more times, this method returns\n * only the values that haven't been yielded yet.\n * @param {!Iterator<T>} iterator\n * @return {!Array<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.arrayFromIterator = function(iterator) {\n  var i;\n  var arr = [];\n  while (!(i = iterator.next()).done) {\n    arr.push(i.value);\n  }\n  return arr;\n};\n","js/es6/util/arrayiterator.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility method for creating an iterator for Arrays.\n */\n'require base';\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!IArrayLike<T>} array\n * @return {function():!IIterableResult<T>}\n * @template T\n */\n$jscomp.arrayIteratorImpl = function(array) {\n  var index = 0;\n  return function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  };\n};\n\n/**\n * Returns an internal iterator from the given array.\n * @param {!Array<T>} array\n * @return {!Iterator<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  return /** @type {!Iterator<T>} */ ({next: $jscomp.arrayIteratorImpl(array)});\n};\n\n","js/es6/util/assign.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/owns';\n'require util/polyfill';\n'require util/shouldpolyfill';\n\n/**\n * Equivalent to the Object.assign() method, but guaranteed to be available for use in code\n * generated by the compiler.\n *\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n *\n * Copies values of all enumerable own properties from one or more\n * sources to the given target object, and returns the target.\n *\n * @final\n * @param {!Object} target The target object onto which to copy.\n * @param {...?Object} var_args The source objects.\n * @return {!Object} The target object is returned.\n */\n$jscomp.assign =\n    ($jscomp.TRUST_ES6_POLYFILLS && typeof Object.assign == 'function') ?\n    Object.assign :\n    /**\n     * @param {!Object} target\n     * @param {...?Object} var_args\n     * @return {!Object}\n     * @suppress {reportUnknownTypes}\n     */\n    function(target, var_args) {\n      for (var i = 1; i < arguments.length; i++) {\n        var source = arguments[i];\n        if (!source) continue;\n        for (var key in source) {\n          if ($jscomp.owns(source, key)) target[key] = source[key];\n        }\n      }\n      return target;\n    };\n","js/es6/util/construct.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n'require util/polyfill';\n'require util/shouldpolyfill';\n\n/**\n * Find or create a method that implements the behavior of `Reflect.construct`.\n *\n * @return {!Function}\n */\n$jscomp.getConstructImplementation = function() {\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if ($jscomp.TRUST_ES6_POLYFILLS && typeof Reflect != 'undefined' &&\n      Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to\n     *     instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to\n   *     instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n};\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * The call to `$jscomp.getConstructImplementation()` is wrapped up as an object\n * literal `valueOf()` call in order to hide the (meaningless) side-effects\n * it contains that would otherwise prevent its definition from being removed,\n * even when nothing refers to `$jscomp.construct`.\n * @const\n */\n$jscomp.construct =\n    /** @type {typeof Reflect.construct} */ (\n        {valueOf: $jscomp.getConstructImplementation}.valueOf());\n","js/es6/util/createtemplatetagfirstarg.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for a tagged template's argument\n * @suppress {uselessCode}\n */\n'require base';\n\n/**\n * Simply accepts an ITemplateArray and returns it after setting its raw\n * property\n * @param {!ITemplateArray} arrayStrings\n * @return {!ITemplateArray}\n * @noinline\n */\n$jscomp.createTemplateTagFirstArg = function(arrayStrings) {\n  arrayStrings.raw = arrayStrings;\n  return /** @type {!ITemplateArray} */ (arrayStrings);\n};\n\n/**\n * Simply accepts an ITemplateArray and returns it after setting its raw\n * property\n * @param {!ITemplateArray} arrayStrings\n * @param {!ITemplateArray} rawArrayStrings raw string values of arrayString\n * @return {!ITemplateArray}\n * @noinline\n */\n$jscomp.createTemplateTagFirstArgWithRaw = function(\n    arrayStrings, rawArrayStrings) {\n  arrayStrings.raw = rawArrayStrings;\n  return /** @type {!ITemplateArray} */ (arrayStrings);\n};\n","js/es6/util/inherits.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for ES6 extends keyword.\n * @suppress {uselessCode}\n */\n'require base';\n'require util/objectcreate';\n'require es6/util/setprototypeof';\n\n\n/**\n * Inherit the prototype methods and static methods from one constructor\n * into another.\n *\n * This wires up the prototype chain (like goog.inherits) and copies static\n * properties, for ES6-to-ES{3,5} transpilation.\n *\n * Usage:\n * <pre>\n *   function ParentClass() {}\n *\n *   // Regular method.\n *   ParentClass.prototype.foo = function(a) {};\n *\n *   // Static method.\n *   ParentClass.bar = function() {};\n *\n *   function ChildClass() {\n *     ParentClass.call(this);\n *   }\n *   $jscomp.inherits(ChildClass, ParentClass);\n *\n *   var child = new ChildClass();\n *   child.foo();\n *   ChildClass.bar();  // Static inheritance.\n * </pre>\n *\n * @param {!Function} childCtor Child class.\n * @param {!Function} parentCtor Parent class.\n * @suppress {strictMissingProperties} 'superClass_' is not defined on Function\n */\n$jscomp.inherits = function(childCtor, parentCtor) {\n  childCtor.prototype = $jscomp.objectCreate(parentCtor.prototype);\n  /** @override */ childCtor.prototype.constructor = childCtor;\n  if ($jscomp.setPrototypeOf) {\n    // avoid null dereference warning\n    /** @const {!Function} */\n    var setPrototypeOf = $jscomp.setPrototypeOf;\n    setPrototypeOf(childCtor, parentCtor);\n  } else {\n    // setPrototypeOf is not available so we need to copy the static\n    // methods to the child\n    for (var p in parentCtor) {\n      if (p == 'prototype') {\n        // Don't copy parentCtor.prototype to childCtor.\n        continue;\n      }\n      if (Object.defineProperties) {\n        var descriptor = Object.getOwnPropertyDescriptor(parentCtor, p);\n        if (descriptor) {\n          Object.defineProperty(childCtor, p, descriptor);\n        }\n      } else {\n        // Pre-ES5 browser. Just copy with an assignment.\n        childCtor[p] = parentCtor[p];\n      }\n    }\n  }\n\n  childCtor.superClass_ = parentCtor.prototype;\n};\n","js/es6/util/iteratorfromarray.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var done = false;\n  var iter = {\n    next: function() {\n      // Once we return done, we must always return done, even if the array\n      // grows later.\n      if (!done && i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      done = true;\n      return {done: true, value: void 0};\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","js/es6/util/makeasynciterator.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/symbol';\n'require es6/util/makeiterator';\n\n/**\n * Creates an iterator for the given iterable.\n *\n * @param {string|!AsyncIterable<T>|!Iterable<T>|!Iterator<T>|!Arguments} iterable\n * @return {!AsyncIteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeAsyncIterator = function(iterable) {\n  var asyncIteratorFunction = (iterable)[Symbol.asyncIterator];\n  if (asyncIteratorFunction !== undefined) {\n    return asyncIteratorFunction.call(iterable);\n  }\n  return new $jscomp.AsyncIteratorFromSyncWrapper($jscomp.makeIterator(\n      /** @type {string|!Iterable<T>|!Iterator<T>|!Arguments} */\n      (iterable)));\n};\n\n/**\n *\n * @param {!Iterator<T>} iterator\n * @constructor\n * @implements {AsyncIteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.AsyncIteratorFromSyncWrapper = function(iterator) {\n  /**\n   * @return {!AsyncIterator<T>}\n   */\n  this[Symbol.asyncIterator] = function() {\n    return this;\n  };\n\n  /**\n   * @return {!Iterator<!Promise<!IIterableResult<T>>>}\n   */\n  this[Symbol.iterator] = function() {\n    return iterator;\n  };\n\n  /**\n   * @param {?=} param\n   * @return {!Promise<!IIterableResult<T>>}\n   */\n  this.next = function(param) {\n    return Promise.resolve(iterator.next(param));\n  };\n\n  if (iterator['throw'] !== undefined) {\n    /**\n     * @param {?} param\n     * @return {!Promise<!IIterableResult<T>>}\n     */\n    this['throw'] = function(param) {\n      return Promise.resolve(iterator['throw'](param));\n    };\n  }\n\n  if (iterator['return'] !== undefined) {\n    /**\n     * @param {T} param\n     * @return {!Promise<!IIterableResult<T>>}\n     */\n    this['return'] = function(param) {\n      return Promise.resolve(iterator['return'](param));\n    };\n  }\n};\n","js/es6/util/makeiterator.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/util/arrayiterator';\n\n/**\n * Creates an iterator for the given iterable.  This iterator should never\n * be exposed to user code.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = typeof Symbol != 'undefined' && Symbol.iterator &&\n      (/** @type {?} */ (iterable)[Symbol.iterator]);\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","js/es6/util/setprototypeof.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/defines';\n'require util/polyfill';\n'require util/shouldpolyfill';\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = ($jscomp.TRUST_ES6_POLYFILLS &&\n                          typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ? function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } : null;\n","js/es6/weakmap.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /** @constructor */\n  function WeakMapMembership() {}\n\n  /**\n   * Returns whether the argument is a valid WeakMap key.\n   * @param {*} key\n   * @return {boolean}\n   */\n  function isValidKey(key) {\n    var type = typeof key;\n    return (type === 'object' && key !== null) || type === 'function';\n  }\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = new WeakMapMembership();\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    if ($jscomp.ISOLATE_POLYFILLS) {\n      // Monkey-patching Object.freeze and friends can cause bad interactions\n      // with third-party code. This means that polyfill isolation does not\n      // support inserting frozen objects as keys into a WeakMap.\n      return;\n    }\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        if (target instanceof WeakMapMembership) {\n          return target;\n        } else {\n          if (Object.isExtensible(target)) {\n            insert(target);\n          }\n          return prev(target);\n        }\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    if (!isValidKey(key)) {\n      throw new Error('Invalid WeakMap key');\n    }\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return isValidKey(key) && $jscomp.owns(key, prop) ? key[prop][this.id_] :\n                                                        undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return isValidKey(key) && $jscomp.owns(key, prop) &&\n        $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!isValidKey(key) || !$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","js/es6/weakset.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/util/makeiterator';\n'require util/polyfill';\n'require es6/weakmap';\n\n$jscomp.polyfill('WeakSet',\n    /**\n     * @param {*} NativeWeakSet\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakSet) {\n  /**\n   * Checks conformance of the existing WeakSet.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakSet || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var set = new /** @type {function(new: WeakSet, !Array)} */ (\n          NativeWeakSet)([x]);\n      if (!set.has(x) || set.has(y)) return false;\n      set.delete(x);\n      set.add(y);\n      return !set.has(x) && set.has(y);\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakSet && $jscomp.ES6_CONFORMANCE) return NativeWeakSet;\n  } else {\n    if (isConformant()) return NativeWeakSet;\n  }\n\n  /**\n   * @constructor\n   * @extends {WeakSet<TYPE>}\n   * @template TYPE\n   * @param {!Iterator<TYPE>|!Array<TYPE>|null=} opt_iterable\n   */\n  var PolyfillWeakSet = function(opt_iterable) {\n    /** @private @const {!WeakMap<TYPE, boolean>} */\n    this.map_ = new WeakMap();\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.add(item);\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakSet.prototype.add = function(elem) {\n    this.map_.set(elem, true);\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakSet.prototype.has = function(elem) {\n    return this.map_.has(elem);\n  };\n\n  /** @override */\n  PolyfillWeakSet.prototype.delete = function(elem) {\n    return this.map_.delete(elem);\n  };\n\n  return PolyfillWeakSet;\n}, 'es6', 'es3');\n","js/es6_dart_runtime.js":"/*\n * Copyright 2014 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview  Additional runtime functions required for transpilation from\n * ES6 to ES5 of code generated by the Dart Dev Compiler.\n *\n * Note that DDC's output cannot currently be lowered to ES3 (heavy use of\n * getters or setters, including in the runtime), so these helpers make no\n * attempt of fallback behaviour when methods like Object.getPrototypeOf or\n * Object.getOwnPropertyDescriptor are undefined (unlike helpers in es6/*.js).\n */\n'require base';\n\n/**\n * Gets a property descriptor for a target instance, skipping its class\n * and walking up the super-classes hierarchy.\n *\n * @private\n * @param {!Object} target\n * @param {!string} name\n * @return {?}\n */\n$jscomp.getSuperPropertyDescriptor_ = function(target, name) {\n  var getPrototypeOf = Object.getPrototypeOf;\n  var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n  var cls = getPrototypeOf(target);\n  while (cls != null) {\n    cls = getPrototypeOf(cls);\n    if (cls != null) {\n      var desc = getOwnPropertyDescriptor(cls, name);\n      if (desc != null) {\n        return desc;\n      }\n    }\n  }\n  return undefined;\n};\n\n/**\n * Gets a property of a target instance using its super class getter or value,\n * or returns undefined if that property is not defined on any ancestor.\n *\n * @param {!Object} target\n * @param {!string} propertyName\n * @return {*}\n */\n$jscomp.superGet = function(target, propertyName) {\n  var desc = $jscomp.getSuperPropertyDescriptor_(target, propertyName);\n  return desc && (desc.get ? desc.get.call(target) : desc.value);\n};\n\n/**\n * Sets a property on a target instance using its super setter if is defined\n * on any ancestor, or setting it as a simple property on the target otherwise.\n *\n * @template T\n * @param {!Object} target\n * @param {!string} propertyName\n * @param {T} value\n * @return {T}\n */\n$jscomp.superSet = function(target, propertyName, value) {\n  var desc = $jscomp.getSuperPropertyDescriptor_(target, propertyName);\n  if (desc) {\n    if (!desc.set) {\n      throw new TypeError('No setter for super.' + propertyName);\n    }\n    desc.set.call(target, value);\n  } else {\n    target[propertyName] = value;\n  }\n  return value;\n};\n","js/es6_runtime.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Assorted runtime logic code and polyfills.\n * @suppress {uselessCode}\n */\n'require es6/array';\n'require es6/async_generator_wrapper';\n'require es6/execute_async_generator';\n'require es6/generator_engine';\n'require es6/globalthis';\n'require es6/map';\n'require es6/math';\n'require es6/number';\n'require es6/object';\n'require es6/promise';\n'require es6/reflect';\n'require es6/set';\n'require es6/string';\n'require es6/symbol';\n'require es6/typed_array';\n'require es6/util/createtemplatetagfirstarg';\n'require es6/util/arrayfromiterable';\n'require es6/util/arrayfromiterator';\n'require es6/util/inherits';\n'require es6/util/iteratorfromarray';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require es6/weakset';\n","js/modules.js":"/*\n * Copyright 2018 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/modules/runtime';\n","js/runtime_type_check.js":"/*\n * Copyright 2010 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * @fileoverview Provides the boilerplate code for run-time type checking.\n *\n *\n * @suppress {uselessCode} The require statements below are not useless.\n */\n'require base';\n\n/** @const */\n$jscomp.typecheck = {};\n\n/**\n * A state variable to suspend checking, to avoid infinite calls\n * caused by calling checked code from the checking functions.\n *\n * @type {boolean}\n */\n$jscomp.typecheck.suspendChecking = false;\n\n\n/**\n * Log and possibly format the run-time type check warning. This\n * function is customized at compile-time.\n *\n * @param {string} warning the warning to log.\n * @param {*} expr the faulty expression.\n */\n$jscomp.typecheck.log = function(warning, expr) {};\n\n/**\n * Checks that the given expression matches one of the given checkers,\n * logging if not, and returning the expression regardless.\n *\n * @param {*} expr the expression to check.\n * @param {!Array<!$jscomp.typecheck.Checker>} checkers the checkers to\n *     use in checking, one of these has to match for checking to succeed.\n * @return {*} the given expression back.\n */\n$jscomp.typecheck.checkType = function(expr, checkers) {\n  if ($jscomp.typecheck.suspendChecking) {\n    return expr;\n  }\n  $jscomp.typecheck.suspendChecking = true;\n\n  for (var i = 0; i < checkers.length; i++) {\n    var checker = checkers[i];\n    var ok = checker.check(expr);\n    if (ok) {\n      $jscomp.typecheck.suspendChecking = false;\n      return expr;\n    }\n  }\n\n  var warning = $jscomp.typecheck.prettify_(expr) + ' not in ' +\n      checkers.join(' ');\n\n  $jscomp.typecheck.log(warning, expr);\n\n  $jscomp.typecheck.suspendChecking = false;\n  return expr;\n};\n\n\n/**\n * Prettify the given expression for printing.\n *\n * @param {*} expr the expression.\n * @return {string} a string representation of the given expression.\n * @private\n */\n$jscomp.typecheck.prettify_ = function(expr) {\n  var className = $jscomp.typecheck.getClassName_(expr);\n  if (className) {\n    return className;\n  }\n  try {\n    return String(expr);\n  }\n  catch (e) {}\n  return '<unknown>';\n};\n\n/**\n * Gets the class name if the given expression is an object.\n *\n * @param {*} expr the expression.\n * @return {string|undefined} the class name or undefined if the\n *     expression is not an object.\n * @private\n * @suppress {strictMissingProperties}\n */\n$jscomp.typecheck.getClassName_ = function(expr) {\n  var className = void 0;\n  if (typeof expr == 'object' && expr && expr.constructor) {\n    className = expr.constructor.name;\n    if (!className) {\n      var funNameRe = /function (.{1,})\\(/;\n      var m = (funNameRe).exec(expr.constructor.toString());\n      className = m && m.length > 1 ? m[1] : void 0;\n    }\n  }\n  return className;\n};\n\n/**\n * Interface for all checkers.\n *\n * @interface\n */\n$jscomp.typecheck.Checker = function() {};\n\n\n/**\n * Checks the given expression.\n *\n * @param {*} expr the expression to check.\n * @return {boolean} whether the given expression matches this checker.\n */\n$jscomp.typecheck.Checker.prototype.check = function(expr) {};\n\n\n\n/**\n * A class for all value checkers, except the null checker.\n *\n * @param {string} type the value type (e.g. 'number') of this checker.\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.ValueChecker_ = function(type) {\n  /**\n   * The value type of this checker.\n   * @type {string}\n   * @private\n   */\n  this.type_ = type;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ValueChecker_.prototype.check = function(expr) {\n  return typeof(expr) == this.type_;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ValueChecker_.prototype.toString = function() {\n  return 'value(' + this.type_ + ')';\n};\n\n\n\n/**\n * A checker class for null values.\n *\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.NullChecker_ = function() {};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.NullChecker_.prototype.check = function(expr) {\n  return expr === null;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.NullChecker_.prototype.toString = function() {\n  return 'value(null)';\n};\n\n\n/**\n * A checker class for a class defined in externs, including built-in\n * JS types.\n *\n * <p>If the class type is undefined, then checking is suspended to\n * avoid spurious warnings. This is necessary because some externs\n * types are not defined in all browsers. For example, Window is not\n * defined Chrome, as window has the type DOMWindow.\n *\n * <p>Another subtlety is that a built-in type may be referenced in a\n * different frame than the one in which it was created. This causes\n * instanceOf to return false even though the object is of the correct\n * type. We work around this by checking as many windows as possible,\n * redefining open on top and window to keep track of them.\n *\n * @param {string} className the name of the extern class to check.\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.ExternClassChecker_ = function(className) {\n  /**\n   * The name of the extern class to check.\n   * @type {string}\n   * @private\n   */\n  this.className_ = className;\n};\n\n\n/**\n * A list of (hopefully all) open windows.\n *\n * @type {!Array<!Window>}\n */\n$jscomp.typecheck.ExternClassChecker_.windows = [];\n\n\n/**\n * A list of the original open methods that have been redefined.\n *\n * @type {!Array<!Function>}\n */\n$jscomp.typecheck.ExternClassChecker_.oldOpenFuns = [];\n\n\n/**\n * Redefines the open method on the given window, adding tracking.\n *\n * @param {!Window} win the window to track.\n * @suppress {uselessCode}\n */\n$jscomp.typecheck.ExternClassChecker_.trackOpenOnWindow = function(win) {\n  // Declare the property we add to the window object.\n  // NOTE: we add a declaration in a \"if (false) ...\" to ensure we\n  // don't reference \"Window\" on platforms that don't have a global\n  // Window object (node, service workers, etc).\n  if (false) {\n    /** @type {boolean} */\n    Window.prototype.tracked;\n  }\n\n  if (win.tracked) {\n    return;\n  }\n\n  win.tracked = true;\n\n  var key = $jscomp.typecheck.ExternClassChecker_.oldOpenFuns.length;\n\n  $jscomp.typecheck.ExternClassChecker_.oldOpenFuns.push(win.open);\n  $jscomp.typecheck.ExternClassChecker_.windows.push(win);\n\n  win.open = function() {\n    var w = $jscomp.typecheck.ExternClassChecker_.oldOpenFuns[key].apply(\n        this, arguments);\n    $jscomp.typecheck.ExternClassChecker_.trackOpenOnWindow(w);\n    return w;\n  };\n};\n\n\n/**\n * Returns the global 'this' object. This will normally be the same as 'window'\n * but when running in a worker thread, the DOM is not available.\n *\n * This does not work when strict mode is enabled.\n *\n * @return {!Window}\n * @private\n */\n$jscomp.typecheck.ExternClassChecker_.getGlobalThis_ = function() {\n  return (function() { return this; }).call(null);\n};\n\n\n// Install listeners on the global 'this' object.\n(function() {\n  var globalThis = $jscomp.typecheck.ExternClassChecker_.getGlobalThis_();\n  $jscomp.typecheck.ExternClassChecker_.trackOpenOnWindow(globalThis);\n\n  var theTop = globalThis['top'];\n  if (theTop) {\n    $jscomp.typecheck.ExternClassChecker_.trackOpenOnWindow(theTop);\n  }\n})();\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ExternClassChecker_.prototype.check = function(expr) {\n  var classTypeDefined = [ false ];\n  for (var i = 0; i < $jscomp.typecheck.ExternClassChecker_.windows.length;\n      i++) {\n    var w = $jscomp.typecheck.ExternClassChecker_.windows[i];\n    if (this.checkWindow_(w, expr, classTypeDefined)) {\n      return true;\n    }\n  }\n  return !classTypeDefined[0];\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ExternClassChecker_.prototype.toString = function() {\n  return 'ext_class(' + this.className_ + ')';\n};\n\n\n/**\n * Checks whether the given expression is an instance of this extern\n * class in this window or any of its frames and subframes.\n *\n * @param {!Window} w the window to start checking from.\n * @param {*} expr the expression to check.\n * @param {!Array<boolean>} classTypeDefined a wrapped boolean\n *     updated to indicate whether the class type was seen in any frame.\n * @return {boolean} true if the given expression is an instance of this class.\n * @private\n */\n$jscomp.typecheck.ExternClassChecker_.prototype.checkWindow_ =\n    function(w, expr, classTypeDefined) {\n  var classType = /** @type {function(new: ?)} */ (w[this.className_]);\n  classTypeDefined[0] = classTypeDefined[0] || !!classType;\n  if (classType && expr instanceof classType) {\n    return true;\n  }\n  for (var i = 0; i < w.length; i++) {\n    if (this.checkWindow_(w.frames[i], expr, classTypeDefined)) {\n      return true;\n    }\n  }\n  return false;\n};\n\n\n\n/**\n * A class for all checkers of user-defined classes.\n *\n * @param {string} className name of the class to check.\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.ClassChecker_ = function(className) {\n\n  /**\n   * The name of the class to check.\n   * @type {string}\n   * @private\n   */\n  this.className_ = className;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ClassChecker_.prototype.check = function(expr) {\n  return !!(expr && expr['instance_of__' + this.className_]);\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ClassChecker_.prototype.toString = function() {\n  return 'class(' + this.className_ + ')';\n};\n\n\n\n/**\n * A class for all checkers of user-defined interfaces.\n *\n * @param {string} interfaceName name of the interface to check.\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.InterfaceChecker_ = function(interfaceName) {\n\n  /**\n   * The name of the interface to check.\n   * @type {string}\n   * @private\n   */\n  this.interfaceName_ = interfaceName;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.InterfaceChecker_.prototype.check = function(expr) {\n  return !!(expr && expr['implements__' + this.interfaceName_]);\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.InterfaceChecker_.prototype.toString = function() {\n  return 'interface(' + this.interfaceName_ + ')';\n};\n\n\n\n/**\n * A checker for object types (possibly with non-standard prototype: might not\n * inherit from Object).\n *\n * @constructor\n * @implements {$jscomp.typecheck.Checker}\n * @private\n */\n$jscomp.typecheck.ObjectChecker_ = function() {};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ObjectChecker_.prototype.check = function(expr) {\n  return (typeof(expr) == 'object' || typeof(expr) == 'function') && !!expr;\n};\n\n\n/** @inheritDoc */\n$jscomp.typecheck.ObjectChecker_.prototype.toString = function() {\n  return 'value(object)';\n};\n\n\n\n/**\n * A checker for null values.\n *\n * @type {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.nullChecker = new $jscomp.typecheck.NullChecker_();\n\n\n/**\n * Creates a checker for the given value type (excluding the null type).\n *\n * @param {string} type the value type.\n * @return {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.valueChecker = function(type) {\n  return new $jscomp.typecheck.ValueChecker_(type);\n};\n\n\n/**\n * Creates a checker for the given extern class name.\n *\n * @param {string} className the class name.\n * @return {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.externClassChecker = function(className) {\n  return new $jscomp.typecheck.ExternClassChecker_(className);\n};\n\n\n/**\n * Creates a checker for the given user-defined class.\n *\n * @param {string} className the class name.\n * @return {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.classChecker = function(className) {\n  return new $jscomp.typecheck.ClassChecker_(className);\n};\n\n\n/**\n * Creates a checker for the given user-defined interface.\n *\n * @param {string} interfaceName the interface name.\n * @return {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.interfaceChecker = function(interfaceName) {\n  return new $jscomp.typecheck.InterfaceChecker_(interfaceName);\n};\n\n\n/**\n * A checker for objects.\n *\n * @type {!$jscomp.typecheck.Checker} a checker.\n */\n$jscomp.typecheck.objectChecker = new $jscomp.typecheck.ObjectChecker_();\n","js/util/checkstringargs.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","js/util/defineproperty.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n *\n * @type {(typeof Object.defineProperty)}\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      if (target == Array.prototype ||\n          // b/155133192\n          /** @type {?} */ (target) == Object.prototype) {\n        return target;\n      }\n\n      /**\n       * NOTE: This is currently never called with a descriptor outside\n       * the control of the compiler.  If we ever decide to polyfill either\n       * Object.defineProperty or Reflect.defineProperty for ES3, we should\n       * explicitly check for `get` or `set` on the descriptor and throw a\n       * TypeError, since it's impossible to properly polyfill it.\n       */\n      target[property] = descriptor.value;\n      return target;\n    };\n","js/util/defines.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Whether to assume ES5 is available.  This enables removing several\n * internal polyfills, which must otherwise be detected at runtime.\n * @define {boolean}\n */\n$jscomp.ASSUME_ES5 = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_MAP = false;\n\n/**\n * Whether to skip the conformance check and simply use the polyfill always.\n * @define {boolean}\n */\n$jscomp.ASSUME_NO_NATIVE_SET = false;\n\n/**\n * Whether to provide an incorrect but tiny Math.fround polyfill that just\n * returns the number given.  This is usually okay to do, particularly if\n * `Math.fround` is only used to allow the JavaScript engine to use faster\n * 32-bit float operations, but could cause problems if program logic is\n * dependent on floats being truncated consistently.\n * @define {boolean}\n */\n$jscomp.SIMPLE_FROUND_POLYFILL = false;\n\n/**\n * Whether to isolate all injected polyfills from global state. This is not\n * on by default, as it bloats code size, but is useful when code needs to\n * operate on untrusted third_party sites. It relies on a compiler pass to\n * rewrite potential polyfill accesses.\n * @define {boolean}\n */\n$jscomp.ISOLATE_POLYFILLS = false;\n\n/**\n * Should we unconditionally override a native Promise implementation with our\n * own?\n * @define {boolean}\n */\n$jscomp.FORCE_POLYFILL_PROMISE = false;\n\n/**\n * Override the native Promise implementation if unhandledrejection event is not\n * supported.\n * @define {boolean}\n */\n$jscomp.FORCE_POLYFILL_PROMISE_WHEN_NO_UNHANDLED_REJECTION = false;\n","js/util/finddescriptor.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/reflect/getownpropertydescriptor';\n'require es6/reflect/getprototypeof';\n\n\n/**\n * Helper function to find a descriptor.\n * @param {!Object} target\n * @param {string} propertyKey\n * @return {!ObjectPropertyDescriptor|undefined}\n */\n$jscomp.findDescriptor = function(target, propertyKey) {\n  var /** ?Object */ obj = target;\n  while (obj) {\n    var property = Reflect.getOwnPropertyDescriptor(obj, propertyKey);\n    if (property) {\n      return property;\n    }\n    obj = Reflect.getPrototypeOf(obj);\n  }\n  return undefined;\n};\n","js/util/findinternal.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utility for Array methods that find elements.\n */\n'require base';\n\n// TODO(sdh): would be nice to template on the ARRAY type as well,\n// so that the third arg type of callback can be refined to be\n// exactly the same as the array type, but then there's no way to\n// enforce that it must, in fact, be an array.\n/**\n * Internal implementation of find.\n * @param {!IArrayLike<VALUE>} array\n * @param {function(this: THIS, VALUE, number, !IArrayLike<VALUE>): *} callback\n * @param {THIS} thisArg\n * @return {{i: number, v: (VALUE|undefined)}}\n * @template THIS, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.findInternal = function(array, callback, thisArg) {\n  if (array instanceof String) {\n    array = /** @type {!IArrayLike} */ (String(array));\n  }\n  var len = array.length;\n  for (var i = 0; i < len; i++) {\n    var value = array[i];\n    if (callback.call(thisArg, value, i, array)) return {i: i, v: value};\n  }\n  return {i: -1, v: void 0};\n};\n","js/util/global.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n * @suppress {uselessCode}\n */\n'require base';\n\n/**\n * Locate and return a reference to the global object.\n *\n * NOTE: This method is marked with `noinline`, because `RemoveUnusedCode` has\n * trouble removing the loop it contains if it gets inlined into the global\n * scope.\n * @param {?Object} passedInThis\n * @return {!Global} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n * @noinline\n */\n$jscomp.getGlobal = function(passedInThis) {\n  var possibleGlobals = [\n    // Web Audio Worklets do not have any way to refer to their global object\n    // other than `globalThis`.\n    // This use of `globalThis` does not prevent removal of the `globalThis`\n    // polyfill, because the usage is guarded by a typeof check.\n    'object' == typeof globalThis && globalThis,\n    // Rhino (used by older Google Docs Script projects) has no `window` or\n    // `self`, but `this` from the global scope is the global object. Also,\n    // some GWT tests running on Rhino do have a `window` and `self` but, for\n    // unknown reasons, see runtime exceptions when we return `window` instead\n    // of `passedInThis`.\n    // NOTE: If the compiler's output is wrapped in a strict-mode function,\n    // this file's code won't actually be executing in global scope, so this\n    // value will be undefined.\n    passedInThis,\n    // Browser windows always have `window`\n    'object' == typeof window && window,\n    // WebWorkers have `self`\n    'object' == typeof self && self,\n    // NodeJS has `global`\n    'object' == typeof global && global,\n  ];\n  for (var i = 0; i < possibleGlobals.length; ++i) {\n    var maybeGlobal = possibleGlobals[i];\n    // It can happen that an environment has, for example, both `global` and\n    // `window` defined in the global scope, but one of them isn't actually\n    // the global object, so check that it really seems to be the global object.\n    // We use `Math` to check for this because it's only 4 characters long,\n    // exists in all possible JS environments, and doesn't have the problematic\n    // equality behavior of `NaN`.\n    if (maybeGlobal && maybeGlobal['Math'] == Math) {\n      return /** @type {!Global} */ (maybeGlobal);\n    }\n  }\n  // Throw an exception if we cannot find the global object.\n  // We have to be sneaky about it, otherwise the compiler will think this code\n  // has a side effect (throwing an exception) that prevents it from being\n  // removed, even when all usages of `$jscomp.global` get removed.\n  // Casting through unknown is necessary to keep the compiler from rejecting\n  // this code.\n  return /** @type {!Global} */ (\n      /** @type {?} */ ({\n        valueOf: function() {\n          throw new Error('Cannot find global object');\n        }\n      }.valueOf()));\n};\n\n\n/**\n * The global object.\n * @const {!Global}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","js/util/objectcreate.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","js/util/owns.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","js/util/polyfill.js":"/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {uselessCode}\n */\n'require util/defineproperty';\n'require util/defines';\n'require util/global';\n'require util/shouldpolyfill';\n\n/** @const {!Object<string, ?>} map from classes (Map) to polyfills */\n$jscomp.polyfills = {};\n\n/**\n * Maps a property to an obfuscated look-up string for that property. Only used\n * when `$jscomp.ISOLATE_POLYFILLS is enabled.\n *\n * When compiling with polyfill isolation enabled, to polyfill an\n * `owner.prototype.method` the `$jscomp.polyfill` library function:\n * <ol>\n * <li> creates an obfuscated string for `method`\n * <li> adds the obfuscated string as a new property on the `owner` object\n * <li> assigns the polyfill implementation of `method` to this new obfuscated\n * property on the `owner` object. </li>\n *</ol>\n *\n * This maps the original property name `method` to the new obfuscated property\n * name.\n * @const {!Object<string, string>}\n */\n$jscomp.propertyToPolyfillSymbol = {};\n\n/** @const {string} */\n$jscomp.POLYFILL_PREFIX = '$jscp$';\n\n/**\n * Returns the polyfill function of the given property if present, otherwise\n * returns the actual property.\n *\n * This is a variable instead of a $jscomp.* property to make it simpler for\n * the compiler to avoid prematurely deleting it during optimizations.\n *\n * @param {*} target the receiver for the property access, e.g. `my.str` in\n *     `my.str.includes`\n * @param {string} property the name of the property, e.g. `includes` in\n *     `my.str.includes`\n * @return {?} if an obfuscated symbol for the property was added onto the\n *     target, then this function returns the polyfill for the property.\n *     Otherwise simply looks up the property on the target and returns it as\n *     `target[key]`.\n * @noinline prevent inlining so IsolatePolyfills can find this declaration.\n * @suppress {reportUnknownTypes}\n */\nvar $jscomp$lookupPolyfilledValue = function(target, property) {\n  /** @const */\n  var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];\n  if (obfuscatedName == null) {\n    return target[property];\n  }\n\n  // NOTE: this will throw if `target` is null or undefined.\n  /** @const */\n  var polyfill = target[obfuscatedName];\n\n  // Checking `polyfill !== undefined` is sufficient because $jscomp.polyfill\n  // never installs nullish polyfills. Otherwise we'd have to check something\n  // like `key in target`.\n  return polyfill !== undefined ? polyfill : target[property];\n};\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  if ($jscomp.ISOLATE_POLYFILLS) {\n    $jscomp.polyfillIsolated(target, polyfill, fromLang, toLang);\n  } else {\n    $jscomp.polyfillUnisolated(target, polyfill, fromLang, toLang);\n  }\n};\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n * @param {function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.\n * @param {string} toLang The language level required by the polyfill\n *     implementation.\n * @suppress {reportUnknownTypes}\n * @see $jscomp.polyfill for more documentation\n */\n$jscomp.polyfillUnisolated = function(target, polyfill, fromLang, toLang) {\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) return;\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n\n/**\n * Defines a polyfill for the given class or method under an obfuscated name.\n *\n * The main differences between this method and $jscomp.polyfillUnisolated are:\n *  - classes are defined on $jscomp.polyfills, not window.\n *  - methods (Array.prototype.includes) are defined on Array.prototype under\n *    an obfuscated name Array.prototype.$jscp$includes or a Symbol, if native.\n *  - this method installs our polyfill even when an existing implementation is\n *    found, as it might be an untrusted polyfill. The exception is that if\n *    Symbol is detected to be native, we assume any implementations of ES6\n *    classes/methods are also native and not polyfills.\n *\n * @param {string} target Qualified name of the class or method to polyfill,\n * @param {function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.\n * @param {string} toLang The language level required by the polyfill\n *     implementation.\n * @suppress {reportUnknownTypes}\n * @see $jscomp.polyfill for more parameter documentation\n */\n$jscomp.polyfillIsolated = function(target, polyfill, fromLang, toLang) {\n  var split = target.split('.');\n  var isSimpleName = split.length === 1;\n  var root = split[0];\n\n  // Look up the parent object. For classes this is just $jscomp.global.\n  // For methods/properties this may be a polyfill (Promise) or may a native\n  // object (Array.prototype).\n  var ownerObject;\n  if (!isSimpleName && root in $jscomp.polyfills) {\n    // Handle Symbol.asyncIterator and Promise.prototype.finally\n    ownerObject = $jscomp.polyfills;\n  } else {\n    // Handle Promise, Array.of, and String.prototype.startsWith\n    ownerObject = $jscomp.global;\n  }\n\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in ownerObject)) return;\n    ownerObject = ownerObject[key];\n  }\n\n  var property = split[split.length - 1];\n  // If Symbol is native and the target is in the ES6 spec, use the native imp.\n  // We assume the method/class was not polyfilled since polyfills typically\n  // back off in the presence of an existing implementation.\n  var nativeImpl = $jscomp.IS_SYMBOL_NATIVE && fromLang === 'es6' ?\n      ownerObject[property] :\n      null;\n  var impl = polyfill(nativeImpl);\n\n  if (impl == null) {\n    return;\n  }\n\n  if (isSimpleName) {\n    // Note: `impl` may be the actual native class instead of a\n    // polyfill. Add it to $jscomp.polyfills anyway. The IsolatePolyfills pass\n    // unconditionally replaces `Symbol` with `$jscomp.polyfills['Symbol']`.\n\n    // Use $jscomp.polyfills instead of ownerObject. For simple names like\n    // Promise and Symbol, ownerObject is the global object, and we want to\n    // avoid adding new global variables.\n    $jscomp.defineProperty(\n        $jscomp.polyfills, property,\n        {configurable: true, writable: true, value: impl});\n  } else if (impl !== nativeImpl) {\n    // Skip installing an obfuscated property if we have found a native version\n    // of the method we're polyfilling. $jscomp$lookupPolyfilledValue will fall\n    // back to the native version anyway.\n    if ($jscomp.propertyToPolyfillSymbol[property] === undefined) {\n      $jscomp.propertyToPolyfillSymbol[property] = $jscomp.IS_SYMBOL_NATIVE ?\n          // use bracket access to avoid injecting the Symbol polyfill\n          $jscomp.global['Symbol'](property) :\n          $jscomp.POLYFILL_PREFIX + property;\n    }\n\n    /** @const {string} */\n    var obfuscatedName = $jscomp.propertyToPolyfillSymbol[property];\n\n    // Define the polyfilled method on its owner but under an obfuscated\n    // name to avoid collisions. The owner will be a native class like `Promise`\n    // or a native class's prototype like `Array.prototype`.\n    $jscomp.defineProperty(\n        ownerObject, obfuscatedName,\n        {configurable: true, writable: true, value: impl});\n  }\n};\n","js/util/reflectobject.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Definition for object reflection.\n *\n * Internal compiler version of closure library goog.reflect.object.\n *\n * Use this if you have an object literal whose keys need to have the same names\n * as the properties of some class even after they are renamed by the compiler.\n *\n * @param {?Object} type class, interface, or record\n * @param {T} object Object literal whose properties must be renamed\n *     consistently with type\n * @return {T} The object literal.\n * @template T\n */\n$jscomp.reflectObject = function(type, object) {\n  return object;\n};\n\n/**\n * Definition for object property reflection.\n *\n * Internal compiler version of closure library goog.reflect.objectProperty.\n *\n * Use this if you have a string that needs renamed as if it were an unquoted\n * property of a class.\n *\n * @param {string} propName\n * @param {?Object} type class, interface, or record\n * @return {string}\n */\n$jscomp.reflectProperty = function(propName, type) {\n  return propName;\n};\n","js/util/shouldpolyfill.js":"/*\n * Copyright 2020 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Helpers to decide whether to trust existing implementations of\n * polyfilled methods.\n * @suppress {uselessCode} the requires are considered \"useless\"\n */\n\n'require util/defines';\n\n/**\n * @const {boolean} whether Symbol is implemented natively (i.e. is not a\n * polyfill)\n */\n$jscomp.IS_SYMBOL_NATIVE =\n    typeof Symbol === 'function' && typeof Symbol('x') === 'symbol';\n\n/**\n * Whether code should use built-in versions of ES6 methods when available.\n *\n * @const {boolean}\n */\n$jscomp.TRUST_ES6_POLYFILLS =\n    !$jscomp.ISOLATE_POLYFILLS || $jscomp.IS_SYMBOL_NATIVE;\n","js/util/stringpadding.js":"/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/string/repeat';\n\n/**\n * Repeats the given string as necessary to reach the given length,\n * truncating any extra characters.\n * @param {string|undefined} padString\n * @param {number} padLength\n * @return {string}\n */\n$jscomp.stringPadding = function(padString, padLength) {\n  var padding = padString !== undefined ? String(padString) : ' ';\n  if (!(padLength > 0) || !padding) return '';\n  var repeats = Math.ceil(padLength / padding.length);\n  return padding.repeat(repeats).substring(0, padLength);\n};\n","js/polyfills.txt":"Array.from es6 es3 es6/array/from\nArray.of es6 es3 es6/array/of\nArray.prototype.copyWithin es6 es3 es6/array/copywithin\nArray.prototype.entries es6 es3 es6/array/entries\nArray.prototype.fill es6 es3 es6/array/fill\nArray.prototype.find es6 es3 es6/array/find\nArray.prototype.findIndex es6 es3 es6/array/findindex\nArray.prototype.flat es9 es5 es6/array/flat\nArray.prototype.flatMap es9 es5 es6/array/flatmap\nArray.prototype.includes es7 es3 es6/array/includes\nArray.prototype.keys es6 es3 es6/array/keys\nArray.prototype.values es8 es3 es6/array/values\nFloat32Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nFloat32Array.prototype.fill es6 es5 es6/typedarray/fill\nFloat64Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nFloat64Array.prototype.fill es6 es5 es6/typedarray/fill\nInt16Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nInt16Array.prototype.fill es6 es5 es6/typedarray/fill\nInt32Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nInt32Array.prototype.fill es6 es5 es6/typedarray/fill\nInt8Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nInt8Array.prototype.fill es6 es5 es6/typedarray/fill\nMap es6 es3 es6/map\nMath.acosh es6 es3 es6/math/acosh\nMath.asinh es6 es3 es6/math/asinh\nMath.atanh es6 es3 es6/math/atanh\nMath.cbrt es6 es3 es6/math/cbrt\nMath.clz32 es6 es3 es6/math/clz32\nMath.cosh es6 es3 es6/math/cosh\nMath.expm1 es6 es3 es6/math/expm1\nMath.fround es6 es3 es6/math/fround\nMath.hypot es6 es3 es6/math/hypot\nMath.imul es6 es3 es6/math/imul\nMath.log10 es6 es3 es6/math/log10\nMath.log1p es6 es3 es6/math/log1p\nMath.log2 es6 es3 es6/math/log2\nMath.sign es6 es3 es6/math/sign\nMath.sinh es6 es3 es6/math/sinh\nMath.tanh es6 es3 es6/math/tanh\nMath.trunc es6 es3 es6/math/trunc\nNumber.EPSILON es6 es3 es6/number/constants\nNumber.MAX_SAFE_INTEGER es6 es3 es6/number/constants\nNumber.MIN_SAFE_INTEGER es6 es3 es6/number/constants\nNumber.isFinite es6 es3 es6/number/isfinite\nNumber.isInteger es6 es3 es6/number/isinteger\nNumber.isNaN es6 es3 es6/number/isnan\nNumber.isSafeInteger es6 es3 es6/number/issafeinteger\nNumber.parseFloat es6 es3 es6/number/parsefloat\nNumber.parseInt es6 es3 es6/number/parseint\nObject.assign es6 es3 es6/object/assign\nObject.entries es8 es3 es6/object/entries\nObject.fromEntries es_2019 es3 es6/object/fromentries\nObject.getOwnPropertyDescriptors es8 es5 es6/object/getownpropertydescriptors\nObject.getOwnPropertySymbols es6 es5 es6/object/getownpropertysymbols\nObject.is es6 es3 es6/object/is\nObject.setPrototypeOf es6 es5 es6/object/setprototypeof\nObject.values es8 es3 es6/object/values\nPromise es6 es3 es6/promise/promise\nPromise.allSettled es_2020 es3 es6/promise/allSettled\nPromise.prototype.finally es9 es3 es6/promise/finally\nProxy es6 es6\nReflect es6 es3 es6/reflect/reflect\nReflect.apply es6 es3 es6/reflect/apply\nReflect.construct es6 es3 es6/reflect/construct\nReflect.defineProperty es6 es5 es6/reflect/defineproperty\nReflect.deleteProperty es6 es3 es6/reflect/deleteproperty\nReflect.get es6 es5 es6/reflect/get\nReflect.getOwnPropertyDescriptor es6 es5 es6/reflect/getownpropertydescriptor\nReflect.getPrototypeOf es6 es5 es6/reflect/getprototypeof\nReflect.has es6 es3 es6/reflect/has\nReflect.isExtensible es6 es3 es6/reflect/isextensible\nReflect.ownKeys es6 es5 es6/reflect/ownkeys\nReflect.preventExtensions es6 es3 es6/reflect/preventextensions\nReflect.set es6 es5 es6/reflect/set\nReflect.setPrototypeOf es6 es5 es6/reflect/setprototypeof\nSet es6 es3 es6/set\nString.fromCodePoint es6 es3 es6/string/fromcodepoint\nString.prototype.codePointAt es6 es3 es6/string/codepointat\nString.prototype.endsWith es6 es3 es6/string/endswith\nString.prototype.includes es6 es3 es6/string/includes\nString.prototype.matchAll es_2020 es3 es6/string/matchall\nString.prototype.normalize es6 es6\nString.prototype.padEnd es8 es3 es6/string/padend\nString.prototype.padStart es8 es3 es6/string/padstart\nString.prototype.repeat es6 es3 es6/string/repeat\nString.prototype.startsWith es6 es3 es6/string/startswith\nString.prototype.trimEnd es_2019 es3 es6/string/trimend\nString.prototype.trimLeft es_2019 es3 es6/string/trimstart\nString.prototype.trimRight es_2019 es3 es6/string/trimend\nString.prototype.trimStart es_2019 es3 es6/string/trimstart\nString.raw es6 es6\nSymbol es6 es3 es6/symbol\nSymbol.asyncIterator es9 es3 es6/symbol\nSymbol.iterator es6 es3 es6/symbol\nUint16Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nUint16Array.prototype.fill es6 es5 es6/typedarray/fill\nUint32Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nUint32Array.prototype.fill es6 es5 es6/typedarray/fill\nUint8Array.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nUint8Array.prototype.fill es6 es5 es6/typedarray/fill\nUint8ClampedArray.prototype.copyWithin es6 es5 es6/typedarray/copywithin\nUint8ClampedArray.prototype.fill es6 es5 es6/typedarray/fill\nWeakMap es6 es3 es6/weakmap\nWeakSet es6 es3 es6/weakset\nglobalThis es_2020 es3 es6/globalthis\n","parsing/ParserConfig.properties":"# Copyright 2009 The Closure Compiler Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Configuration options for the Parser.\n#\n# Allows us to update the allowed JSDoc annotations independently of the\n# Compiler binary, so we can add new JSDoc annotations to old binaries.\n\n# A comma-delimited list.\n# Some of these are not used by JSCompiler, but appear in third-party JS code.\n# http://usejsdoc.org/\n# It's not strictly necessary for the natively-supported annotations to be\n# listed here, but it's nice to have them all in one place.\njsdoc.annotations =\\\n    addon,\\\n    alias,\\\n    alternateMessageId,\\\n    animations,\\\n    appliesMixin,\\\n    async,\\\n    augments,\\\n    author,\\\n    base,\\\n    borrows,\\\n    bug,\\\n    channel, \\\n    class,\\\n    classdesc,\\\n    closurePrimitive,\\\n    codepen,\\\n    collapsibleOrBreakMyCode,\\\n    config,\\\n    constructor,\\\n    constructs,\\\n    copyright,\\\n    default,\\\n    delegate,\\\n    demo,\\\n    deprecated,\\\n    desc,\\\n    description,\\\n    dict,\\\n    docsNotRequired,\\\n    docs-private,\\\n    element,\\\n    enhance,\\\n    enhanceable,\\\n    enum,\\\n    event,\\\n    eventOf,\\\n    eventType,\\\n    example,\\\n    exception,\\\n    exec,\\\n    export,\\\n    exportDoc,\\\n    exportInterface,\\\n    expose,\\\n    externs,\\\n    field,\\\n    file,\\\n    fires,\\\n    function,\\\n    global,\\\n    hassoydelcall,\\\n    hassoydeltemplate,\\\n    hideconstructor, \\\n    id,\\\n    idGenerator,\\\n    ignore,\\\n    inner,\\\n    instance,\\\n    kind,\\\n    lends,\\\n    link,\\\n    meaning,\\\n    member,\\\n    memberOf,\\\n    memberof,\\\n    method,\\\n    methodOf,\\\n    mixes,\\\n    mixin,\\\n    modName,\\\n    moddedBy,\\\n    model,\\\n    modifies,\\\n    mods,\\\n    module,\\\n    multiElement,\\\n    name,\\\n    namespace,\\\n    ngInject,\\\n    ngdoc,\\\n    nocompile,\\\n    package,\\\n    param,\\\n    parent,\\\n    pintomodule,\\\n    preserveTry,\\\n    priority,\\\n    private,\\\n    property,\\\n    propertyOf,\\\n    protected,\\\n    provideGoog,\\\n    pseudoElement,\\\n    public,\\\n    pureOrBreakMyCode,\\\n    readonly,\\\n    requirecss,\\\n    requires,\\\n    requireExtern,\\\n    restrict,\\\n    returns,\\\n    scope,\\\n    see,\\\n    since,\\\n    static,\\\n    struct,\\\n    summary,\\\n    supported,\\\n    this,\\\n    throws,\\\n    todo,\\\n    transaction,\\\n    tutorial,\\\n    type,\\\n    typedef,\\\n    typeSummary,\\\n    url,\\\n    usage,\\\n    version,\\\n    virtual,\\\n    visibility,\\\n    wizSupportsSymbolicLookup,\\\n    wizaction,\\\n    wizmodule\n\n# Comma-delimited list of valid suppressions.\n# This should be a subset of the list of DiagnosticGroups.\njsdoc.suppressions =\\\n    accessControls,\\\n    checkDebuggerStatement,\\\n    checkPrototypalTypes,\\\n    checkRegExp,\\\n    checkTypes,\\\n    checkVars,\\\n    closureDepMethodUsageChecks,\\\n    const,\\\n    constantProperty,\\\n    deprecated,\\\n    duplicate,\\\n    es5Strict,\\\n    externsValidation,\\\n    extraProvide,\\\n    extraRequire,\\\n    globalThis,\\\n    invalidCasts,\\\n    legacyGoogScopeRequire,\\\n    lateProvide,\\\n    lintChecks,\\\n    messageConventions,\\\n    misplacedTypeAnnotation,\\\n    missingOverride, \\\n    missingPolyfill, \\\n    missingProperties,\\\n    missingProvide,\\\n    missingRequire,\\\n    missingReturn,\\\n    missingSourcesWarnings,\\\n    moduleLoad,\\\n    nonStandardJsDocs,\\\n    partialAlias,\\\n    polymer,\\\n    reportUnknownTypes,\\\n    strictCheckTypes,\\\n    strictMissingProperties,\\\n    strictModuleDepCheck,\\\n    strictPrimitiveOperators,\\\n    suspiciousCode,\\\n    transitionalSuspiciousCodeWarnings,\\\n    undefinedNames,\\\n    undefinedVars,\\\n    underscore,\\\n    unknownDefines,\\\n    untranspilableFeatures,\\\n    unusedLocalVariables,\\\n    unusedPrivateMembers,\\\n    useOfGoogProvide,\\\n    uselessCode,\\\n    visibility,\\\n    with\n\n# A comma-delimited list of valid closure primitive ids.\n# This correspond to the ClosurePrimitive enum once normalized (see ClosurePrimitive.fromStringId)\njsdoc.primitives =\\\n   asserts.fail,\\\n   asserts.matchesReturn,\\\n   asserts.truthy,\\\n\n# A comma-delimited list of reserved words that we should not rename variables\n# to. Used when an extension is released that steps on globals.\n# This prevents the compiler from renaming variables to these names, but not\n# from allowing externs for these names.\n#\n# i,j - common loop variables often overwritten by browser extensions\n# s – commonly defined by browser extensions when injecting scripts.\n# $j,$ - common jquery aliases often overwritten by browser extensions\n# o - overwritten by Norton Identity Protection's Chrome extension.\n# ga,_gaq - global variable names used by Google Analytics.\n# sun,java - May cause issues in older browsers with remnants of Java support.\n# XR - extern added by the webXR platform API.\n# TODO(tbreisacher): Remove 'ga' and '_gaq' if/when we enable\n# --isolation_mode=IIFE by default.\ncompiler.reserved.vars = i,j,s,$,$j,o,ga,_gaq,sun,XR,java\n","rhino/Messages.properties":"#\n# Default JavaScript messages file.\n#\n# ***** BEGIN LICENSE BLOCK *****\n# Version: MPL 1.1/GPL 2.0\n#\n# The contents of this file are subject to the Mozilla Public License Version\n# 1.1 (the \"License\"); you may not use this file except in compliance with\n# the License. You may obtain a copy of the License at\n# http://www.mozilla.org/MPL/\n#\n# Software distributed under the License is distributed on an \"AS IS\" basis,\n# WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n# for the specific language governing rights and limitations under the\n# License.\n#\n# The Original Code is Rhino code, released\n# May 6, 1999.\n#\n# The Initial Developer of the Original Code is\n# Netscape Communications Corporation.\n# Portions created by the Initial Developer are Copyright (C) 1997-1999\n# the Initial Developer. All Rights Reserved.\n#\n# Contributor(s):\n#   Norris Boyd\n#   Bob Jervis\n#   Pascal-Louis Perez\n#\n# Alternatively, the contents of this file may be used under the terms of\n# the GNU General Public License Version 2 or later (the \"GPL\"), in which\n# case the provisions of the GPL are applicable instead of those above. If\n# you wish to allow use of your version of this file only under the terms of\n# the GPL and not to allow others to use your version of this file under the\n# MPL, indicate your decision by deleting the provisions above and replacing\n# them with the notice and other provisions required by the GPL. If you do\n# not delete the provisions above, a recipient may use your version of this\n# file under either the MPL or the GPL.\n#\n# ***** END LICENSE BLOCK *****\n\n# This is replaced during jar assembly from property string\n# and should not be translated\nimplementation.version = @IMPLEMENTATION.VERSION@\n\n#\n# To add JavaScript error messages for a particular locale, create a\n# new Messages_[locale].properties file, where [locale] is the Java\n# string abbreviation for that locale.  For example, JavaScript\n# messages for the Polish locale should be located in\n# Messages_pl.properties, and messages for the Italian Swiss locale\n# should be located in Messages_it_CH.properties.  Message properties\n# files should be accessible through the classpath under\n# org.mozilla.javascript.resources\n#\n# See:\n# java.util.ResourceBundle\n# java.text.MessageFormat\n#\n\n# SomeJavaClassWhereUsed\n\n# Codegen\nmsg.unexpected.eof =\\\n    Unexpected end of file\n\nmsg.end.annotation.expected =\\\n    expected end of line or comment.\n\nmsg.bad.jsdoc.tag =\\\n    illegal use of unknown JSDoc tag \"{0}\"; ignoring it. Place another character before the @ to stop JSCompiler from parsing it as an annotation.\n\nmsg.bad.fileoverview.visibility.annotation =\\\n    {0} visibility not allowed in @fileoverview block\n\nmsg.missing.variable.name =\\\n    expecting a variable name in a @param tag.\n\nmsg.dup.variable.name =\\\n    duplicate variable name \"{0}\"\n\nmsg.invalid.variable.name =\\\n    invalid param name \"{0}\"\n\nmsg.jsdoc.incompat.type =\\\n    type annotation incompatible with other annotations.\n\nmsg.jsdoc.type.syntax =\\\n    type not recognized due to syntax error.\n\nmsg.jsdoc.name.syntax =\\\n    name not recognized due to syntax error.\n\nmsg.jsdoc.override =\\\n    extra @override/@inheritDoc tag.\n\nmsg.jsdoc.final =\\\n    extra @final tag.\n\nmsg.jsdoc.extra.visibility=\\\n    extra visibility tag\n\nmsg.jsdoc.idgen.duplicate =\\\n    extra @idGenerator tag\n\nmsg.jsdoc.idgen.bad =\\\n    malformed @idGenerator tag\n\nmsg.jsdoc.wizaction =\\\n    extra @wizaction tag\n\nmsg.jsdoc.idgen.unknown =\\\n    unknown @idGenerator parameter: {0}\n\nmsg.jsdoc.hidden =\\\n    extra @hidden tag\n\nmsg.jsdoc.const =\\\n    conflicting @const tag\n\nmsg.jsdoc.desc.extra =\\\n    extra @desc tag\n\nmsg.jsdoc.meaning.extra =\\\n    extra @meaning tag\n\nmsg.jsdoc.alternateMessageId.extra =\\\n    extra @alternateMessageId tag\n\nmsg.jsdoc.fileoverview.extra =\\\n    extra @fileoverview tag\n\nmsg.jsdoc.lends.incompatible =\\\n    @lends tag incompatible with other annotations.\n\nmsg.jsdoc.lends.missing =\\\n    missing object name in @lends tag.\n\nmsg.jsdoc.closurePrimitive.extra =\\\n    conflicting @closurePrimitive tag\n\nmsg.jsdoc.closurePrimitive.invalid =\\\n    invalid id in @closurePrimitive tag.\n\nmsg.jsdoc.closurePrimitive.missing =\\\n    missing id in @closurePrimitive tag.\n\nmsg.jsdoc.missing.lc =\\\n    missing opening '{'\n\nmsg.jsdoc.missing.lp =\\\n    missing opening (\n\nmsg.jsdoc.missing.braces =\\\n    Type annotations should have curly braces.\n\nmsg.jsdoc.unnecessary.braces =\\\n    braces are not required here\n\nmsg.jsdoc.missing.rc =\\\n    expected closing }\n\nmsg.jsdoc.missing.rp =\\\n    missing closing )\n\nmsg.jsdoc.missing.gt =\\\n    missing closing >\n\nmsg.jsdoc.missing.rb =\\\n    missing closing ]\n\nmsg.jsdoc.missing.colon =\\\n    expecting colon after this\n\nmsg.jsdoc.function.newnotobject =\\\n    constructed type must be an object type\n\nmsg.jsdoc.function.varargs =\\\n    variable length argument must be last.\n\nmsg.jsdoc.type.record.duplicate =\\\n    Duplicate record field {0}.\n\nmsg.jsdoc.deprecated =\\\n    extra @deprecated tag\n\nmsg.jsdoc.interface.constructor =\\\n  cannot be both an interface and a constructor.\n\nmsg.jsdoc.record =\\\n  conflicting @record tag.\n\nmsg.jsdoc.implements.duplicate =\\\n    duplicate @implements tag.\n\nmsg.jsdoc.implements.extraqualifier =\\\n    @implements/@extends requires a bare interface/record name without ! or ?.\n\nmsg.jsdoc.nosideeffects =\\\n    conflicting @nosideeffects tag\n\nmsg.jsdoc.implicitcast =\\\n    extra @implicitCast tag.\n\nmsg.jsdoc.type =\\\n    conflicting @type tag\n\nmsg.jsdoc.define =\\\n    conflicting @define tag\n\nmsg.jsdoc.extends.duplicate =\\\n    duplicate @extends tag\n\nmsg.jsdoc.export =\\\n    extra @export tag\n\nmsg.jsdoc.expose =\\\n    extra @expose tag\n\nmsg.jsdoc.externs =\\\n    extra @externs tag\n\nmsg.jsdoc.typesummary =\\\n    extra @typeSummary tag\n\nmsg.jsdoc.nocompile =\\\n    extra @nocompile tag\n\nmsg.jsdoc.nocollapse =\\\n    extra @nocollapse tag\n\nmsg.jsdoc.noinline =\\\n    extra @noinline tag\n\nmsg.jsdoc.pureorbreakmycode =\\\n    extra @pureOrBreakMyCode tag\n\nmsg.jsdoc.collapsibleorbreakmycode =\\\n    extra @collapsibleOrBreakMyCode tag\n\nmsg.jsdoc.seemissing =\\\n    @see tag missing description\n\nmsg.jsdoc.authormissing =\\\n    @author tag missing author\n\nmsg.jsdoc.versionmissing =\\\n    @version tag missing version information\n\nmsg.jsdoc.extraversion =\\\n    conflicting @version tag\n\nmsg.jsdoc.suppress =\\\n    malformed @suppress tag\n\nmsg.jsdoc.suppress.unknown =\\\n    unknown @suppress parameter: {0}\n\nmsg.jsdoc.modifies =\\\n    malformed @modifies tag\n\nmsg.jsdoc.modifies.duplicate =\\\n    conflicting @modifies tag\n\nmsg.jsdoc.modifies.unknown =\\\n    unknown @modifies parameter: {0}\n\nmsg.jsdoc.polymerBehavior.extra =\\\n    extra @polymerBehavior tag\n\nmsg.jsdoc.polymer.extra =\\\n    extra @polymer tag\n\nmsg.jsdoc.customElement.extra =\\\n    extra @customElement tag\n\nmsg.jsdoc.mixinClass.extra =\\\n    extra @mixinClass tag\n\nmsg.jsdoc.mixinFunction.extra =\\\n    extra @mixinFunction tag\n\nmsg.jsdoc.nginject.extra =\\\n    extra @ngInject tag\n\nmsg.no.type.name =\\\n    expecting a type name.\n\n\nmsg.jsdoc.template.boundedgenerics.used =\\\n    Bounded generic semantics are currently still in development\n\nmsg.jsdoc.template.name.missing =\\\n    @template tag missing type name.\n\nmsg.jsdoc.template.name.redeclaration =\\\n    Type name(s) for @template annotation declared twice.\n\nmsg.jsdoc.template.multipleDeclaration =\\\n    Multiple template names cannot be declared with bounds or TTL.\n\nmsg.jsdoc.template.boundsWithTTL =\\\n    Template types cannot combine bounds and TTL.\n\nmsg.jsdoc.template.typetransformation.missingDelimiter =\\\n    Expected end delimiter for a type transformation.\n\nmsg.jsdoc.template.typetransformation.expressionMissing =\\\n    Missing type transformation expression.\n\n\nmsg.jsdoc.typetransformation.invalid =\\\n    Invalid {0}\n\nmsg.jsdoc.typetransformation.invalid.expression =\\\n    Invalid {0} expression\n\nmsg.jsdoc.typetransformation.missing.param =\\\n    Missing parameter in {0}\n\nmsg.jsdoc.typetransformation.extra.param =\\\n    Found extra parameter in {0}\n\nmsg.jsdoc.typetransformation.invalid.inside =\\\n    Invalid expression inside {0}\n\nmsg.jsdoc.import =\\\n    Import in typedef is not supported."}
